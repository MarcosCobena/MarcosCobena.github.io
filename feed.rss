<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Marcos Cobeña Morián</title>
    <link>https://marcoscobena.com/</link>
    <description>Marcos' Blog</description>
    <managingEditor>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</managingEditor>
    <lastBuildDate>Sat, 18 Apr 2020 21:45:11 Z</lastBuildDate>
    <item>
      <link>https://marcoscobena.com/?i=ipn</link>
      <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
      <title>Introducción a la Programación para Niños</title>
      <description>&lt;p&gt;&lt;strong&gt;Actualización 28/3:&lt;/strong&gt; acabo de publicar el vídeo y el documento de la segunda, y última, clase :-) Al comienzo de ambos están las soluciones (¡algunas de ellas, hay muchas!) a los ejercicios de la clase anterior. ¿Serás capaz de resolver el reto? 8-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Actualización 21/3:&lt;/strong&gt; ¡ya tenéis el vídeo de la primera clase publicado! Justo abajo, en Temario, Clase 1. Además, también he puesto el enlace para la clase del próximo sábado :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Actualización 20/3:&lt;/strong&gt; ya está abajo, junto a la fecha de la 1ª clase, la dirección para conectarte mañana. Finalmente usaremos Skype: el otro día no sabía que YouTube no permite de forma sencilla mostrar la pantalla del organizador. Skype tiene un límite de 50 personas, no creo que lo superemos; pero, por si acaso, grabaré la sesión en vídeo y, mañana mismo, la publicaré aquí para quien quiera verla de nuevo, o tuvo cualquier problema. ¡Acordaos del papel y lápiz!&lt;/p&gt;

&lt;p&gt;¡Hola! :-) Me llamo Marcos y soy un programador que vive en Sevilla. Con la necesidad de quedarnos unos días sin salir de casa, se me ha ocurrido organizar este pequeño curso para entretener a los más pequeños de la casa.&lt;/p&gt;

&lt;p&gt;&lt;img src="items/images/HOW-BRITAIN-ADOPTED-THE-HOME-COMPUTER-OF-THE-1980s-1170x780.jpg" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Niños en los años 80 alrededor de un ordenador de la época (imagen sacada de &lt;a href="https://thecodeshow.info/how-britain-adopted-the-home-computer-of-the-1980s/"&gt;aquí&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Todos los niños saben qué es un móvil, saben manejarlos (a veces incluso mejor que nosotros) pero, ¿saben qué hay dentro? Y, sobre todo, ¿cómo puede uno decirle al móvil que haga lo que yo quiera? De ésto último trata la programación: cómo expresarle al móvil, a un ordenador, qué tiene que hacer paso a paso.&lt;/p&gt;

&lt;p&gt;GOTO ("IR A" en español) es un lenguaje muy muy sencillote; taaan sencillote, que solo trabaja con numeritos: el 1, el 28, etc. ¡Pero se pueden hacer cosas muy chulas con él! Juntos, padres e hijos (y abuelos :-) ), aprenderemos a hacer pequeños programas en GOTO, que en la 2ª clase podremos incluso probar en el ordenador, el móvil o la tablet.&lt;/p&gt;

&lt;p&gt;Cuando era pequeño, mis amigos y yo escribíamos programas en las libretas del colegio y, cuando nos sentábamos delante del ordenador, los tecleábamos por completo para poder probarlos. He querido reflejar esa misma idea aquí: en la 1ª clase no tocaremos el ordenador, solo necesitaremos papel y lápiz y ¡darle al coco! Ya en la 2ª clase, probaremos nuestros programas a ver qué tal se comportan :-)&lt;/p&gt;

&lt;p&gt;¡Apúntate, será muy divertido!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Clase 1:&lt;/strong&gt; sábado, 21 de marzo, a las 11:00 (hora española), 1 h de duración

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Abajo encontrarás tanto el vídeo como el material&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clase 2:&lt;/strong&gt; sábado, 28 de marzo, a las 11:00 (hora española), 1 h de duración

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Abajo encontrarás tanto el vídeo como el material&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Temario&lt;/h2&gt;

&lt;h3&gt;Clase 1&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Mamá, Papá, ¿qué tiene el móvil por dentro?&lt;/li&gt;
&lt;li&gt;¿Cómo piensa un ordenador?&lt;/li&gt;
&lt;li&gt;¿Qué idioma/lenguaje hablan los ordenadores?&lt;/li&gt;
&lt;li&gt;El lenguaje de programación GOTO&lt;/li&gt;
&lt;li&gt;Nuestro primer programa en GOTO&lt;/li&gt;
&lt;li&gt;Ejercicios para la próxima clase&lt;/li&gt;
&lt;/ol&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/g1ToSnhQKJc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;El documento que he usado como presentación está &lt;a href="items/documents/IPN-Clase1.pdf"&gt;aquí&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Clase 2&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;El entorno de programación GoTo Studio

&lt;ol&gt;
&lt;li&gt;Cómo probar tus programas&lt;/li&gt;
&lt;li&gt;Cómo depurar tus programas&lt;/li&gt;
&lt;li&gt;Cómo compartir tus programas&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Macros para no escribir una y otra vez lo mismo&lt;/li&gt;
&lt;li&gt;Reto: ¿qué eres capaz de programar con GOTO?&lt;/li&gt;
&lt;/ol&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/_4H7g4i3Trg" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;El documento que he usado como presentación está &lt;a href="items/documents/IPN-Clase2.pdf"&gt;aquí&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Reto&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Aquí pondré las soluciones que reciba al reto. Puedes encontrar el enunciado del mismo tanto en el vídeo como en el documento de la clase 2&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Preguntas frecuentes&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;¿Qué necesito para seguir el curso?&lt;/strong&gt;
Un ordenador, o una tablet, con acceso a Internet —un móvil también vale, pero se ve todo muy chiquitito, no es del todo cómodo; sí que podrás después probar tus propios programas en el móvil :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;¿Qué precio tiene el curso?&lt;/strong&gt;
Nada, es gratis. Además, el lenguaje GOTO y las herramientas que usaremos también son gratis.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;¿Eres profesor o tienes formación similar de algún tipo?&lt;/strong&gt;
No, lo siento: soy Ingeniero en Informática por la Universidad de Sevilla, y me dedico profesionalmente a programar, desarrollar software, en una consultora española. Pero me gusta eso de dar clases, siempre me ha llamado la atención :-) Puedes verme haciendo algo similar &lt;a href="/?i=conferences"&gt;aquí&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;¿Hay mínimo de edad?&lt;/strong&gt;
Por mi parte, no. El lenguaje GOTO solo suma y resta, no hace más, por lo que si el/la niño/a sabe sumar y restar creo que será suficiente.&lt;/p&gt;</description>
      <pubDate>Fri, 27 Mar 2020 23:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=wave-engines-on-line-gltf-viewer</link>
      <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
      <title>Wave Engine's on-line glTF viewer</title>
      <description>&lt;p&gt;&lt;em&gt;(This post appeared first &lt;a href="https://geeks.ms/waveengineteam/2020/02/06/wave-engines-on-line-gltf-viewer/"&gt;here&lt;/a&gt; on February 6th, 2020)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: We are announcing our experimental glTF on-line viewer made with Wave Engine 3.0, powered by WebAssembly. Try the demo! &lt;a href="http://gltf.waveengine.net" rel="noopener" target="_blank"&gt;http://gltf.waveengine.net&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;During dotNet 2019, on past june, &lt;a href="https://www.youtube.com/watch?v=dzTMsHH5O1w"&gt;we presented our initial support for WebAssembly&lt;/a&gt; (Wasm), showcasing our &lt;a href="https://github.com/WaveEngine/WebGL.NET"&gt;WebGL.NET&lt;/a&gt; library which serves us to draw at a low-level layer. On the following months we worked on refactoring the OpenGL piece into a platform-agnostic &lt;code&gt;WaveEngine.OpenGL.Common&lt;/code&gt; one, from where &lt;code&gt;WaveEngine.WebGL&lt;/code&gt; was born. By the end of the year our visual tests started to pass, and we were ready for testing such in a more real scenario.&lt;/p&gt;

&lt;p&gt;Our current WebGL backend relies on its 2.0 version, which is &lt;a href="https://caniuse.com/#feat=webgl2"&gt;supported by most of the browsers&lt;/a&gt;: the new Edge (based in Chromium), Firefox and Chrome. Although Safari allows to enable WebGL 2.0 through its Experimental Features menu, it is not 100% completed and breaks when running our app. If you are on macOS, please try &lt;a href="https://www.google.com/intl/en_us/chrome/"&gt;Chrome&lt;/a&gt; or &lt;a href="https://www.mozilla.org/en-US/firefox/mac/"&gt;Firefox&lt;/a&gt;; on iOS, it is currently not possible because every browser relies on &lt;a href="https://webkit.org/status/#?search=webgl"&gt;WebKit&lt;/a&gt;, Safari's foundation.&lt;/p&gt;

&lt;p&gt;&lt;img src="items/images/LandingScreenshot.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The on-boarding experience&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://gltf.waveengine.net/"&gt;glTF viewer&lt;/a&gt; is a SPA (Single Page Application, a website run on a single page) which works entirely in client side, powered by &lt;a href="https://github.com/mono/mono/tree/master/sdks/wasm"&gt;Mono's support for Wasm&lt;/a&gt;, which will be &lt;a href="https://twitter.com/jcant0n/status/1200388180316446721"&gt;included in .NET 5&lt;/a&gt;. glTF is the nowadays standard for 3D models, and can be viewed on-line by simply drag &amp;amp; dropping such inside —we've included a demo-mode for those without a handy file close. Its main features pack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;support for glTF 2.0 (*) in different flavours: plain glTF, glTF-Binary (.glb) and glTF-Embedded

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0"&gt;here&lt;/a&gt; you can find sample models&lt;/li&gt;
&lt;li&gt;(*) it may happen models fail loading: we are working on making the import process stronger, and would help us if you report us any issue may find (thanks in advance!)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;load .glb files from external links: you can show models to others by just sharing a single link (&lt;a href="https://gltf.waveengine.net/?model=https%3A%2F%2Fraw.githubusercontent.com%2FKhronosGroup%2FglTF-Sample-Models%2Fmaster%2F2.0%2FAvocado%2FglTF-Binary%2FAvocado.glb"&gt;example&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;manipulate the model with mouse or fingers, thinking on mobile devices for this last&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article will visit a few caveats we found during the development, and how we surpassed them finally. We hope you enjoy reading such and, hopefully, will learn something new in between.&lt;/p&gt;

&lt;h2&gt;There is no File System (FS) in the Web&lt;/h2&gt;

&lt;p&gt;That is not actually true. However, that is the point where we found our-selves when began to work on this project: Wave Engine relies on the concept of content, a path in the FS where the assets are placed. Such assets are, in most of the cases, preprocessed in compile-time. When an app starts the assets are ready to be consumed by the engine.&lt;/p&gt;

&lt;p&gt;Thinking on dropping a set of glTF files within a web page, we needed to drive through the content pipeline in order to process the model through our glTF importer. Along with &lt;a href="https://github.com/kjpou1"&gt;Kenneth Pouncey&lt;/a&gt; (thank you!), from Mono, we had already rewrote in C# the Emscripten's tool to build a Virtual FS (VFS), &lt;a href="https://github.com/kjpou1/Mono.WebAssembly.FilePackager"&gt;Mono.WebAssembly.FilePackager&lt;/a&gt;, by specifying a local path; however, how do we write there files coming from the outside? Emscripten has solved this already, by offering a &lt;a href="https://emscripten.org/docs/api_reference/Filesystem-API.html"&gt;FS API&lt;/a&gt; in JavaScript, in a flavour similar to common I/O operations:&lt;/p&gt;

&lt;p&gt;```javascript
function writeToFS(filename, typedArray) {
    // TODO would there be any other way without handling exceptions?
    try {
        FS.stat(DropAbsoluteDirectory);
    } catch (exception) {
        FS.mkdir(DropAbsoluteDirectory);
    }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let destinationFullPath = DropAbsoluteDirectory + '/' + filename;
let stream = FS.open(destinationFullPath, 'w+');
FS.write(stream, typedArray, 0, typedArray.byteLength, 0);
FS.close(stream);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
```&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This functions writes the bytes at &lt;code&gt;typedArray&lt;/code&gt; into Emscripten's VFS&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Solved this, the next issue we found was how to overcome the glTF files dropped were not processed in any way, and Wave Engine "does not support" reading such on the fly. The quotes are intended, as we do support such: dropping such in the Editor renders the model immediately, but there is some magic underneath.&lt;/p&gt;

&lt;p&gt;We started exploring to consume &lt;code&gt;WaveEngine.Assets&lt;/code&gt; namespace &lt;em&gt;inside&lt;/em&gt; and app, instead of just from the Editor, which was its natural environment. And voilá, it worked! When a .glb file (the single binary format for glTF) is dropped:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it is imported by "decompressing" its content (textures, materials, etc.) into the FS, and&lt;/li&gt;
&lt;li&gt;it is exported by generating .we* files ready to be read by Wave Engine&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of those files is the actual model, which later is used to instantiate the entire entity hierarchy added to the scene. It is not a heavy process when run on the desktop but, when used from Wasm, it takes some precious seconds. Mono has recently added support for multi-threading but, until such will not be broadly adopted by most common browsers, we still cannot rely on it, although will definitely help us reduce such time, as we currently process items one by one.&lt;/p&gt;

&lt;p&gt;One of the most time and memory consuming tasks above process takes is texture importing, which will cover next.&lt;/p&gt;

&lt;h2&gt;Getting image pixels&lt;/h2&gt;

&lt;p&gt;Of the large bunch of models we have tested those days, the most common textures are made of 2048 x 2048 pixels. When we read such the pixel format is expressed as RGBA, which means 4 bytes per pixel. Thus, if we want to allocate space to read the image in memory we need arrays of 2048 * 2048 * 4 bytes, which is a lot. We have found in some minor cases 8K textures, which make such even worse.&lt;/p&gt;

&lt;p&gt;Allocating memory it-self is not a problem, Wave internally depends on &lt;code&gt;ArrayPool&lt;/code&gt; for importing textures, which at least makes that smoother. Textures are handled by our &lt;code&gt;ImageSharpImporter&lt;/code&gt;, &lt;a href="https://github.com/SixLabors/ImageSharp"&gt;SixLabors' ImageSharp&lt;/a&gt;, which we chose mainly because of its cross-platform feature but, under Wasm, there is a large room open for improvement. With big numbers, decoding a 2048 pixels side image can take more than 10 s, which breaks the experience with no doubt. (We have found also blockers with AOT, but eventually workarounded such by disabling the stripper on their assemblies.)&lt;/p&gt;

&lt;p&gt;How, then, can we read images faster? For our &lt;a href="https://webgldotnet.surge.sh/"&gt;WebGL.NET samples gallery&lt;/a&gt;, our friend Juan Antonio Cano consumed Skia through some initial .NET bindings, and already solved such by taking some hundred ms. However, the current state of &lt;a href="https://github.com/unoplatform/Uno.SkiaSharp"&gt;such bindings&lt;/a&gt;, made by Uno team, were not compatible with vanilla Mono Wasm, thus we looked for an alternative thinking on maintenance in a future. Also important, we only needed the small piece to decode an image, and nothing else.&lt;/p&gt;

&lt;p&gt;It turns out &lt;a href="https://skia.org/user/modules/canvaskit"&gt;CanvasKit&lt;/a&gt; ("Skia in Wasm", quickly), exposed such piece, and has a JavaScript interface. We made some tests in the CanvasKit playground and looked promising. Then, our &lt;code&gt;CanvasKitImporter&lt;/code&gt; was born —replacing ImageSharp one.&lt;/p&gt;

&lt;p&gt;```c-sharp
private JSObject DecodeImage(Stream stream)
{
    if (!stream.CanSeek)
    {
        throw new ArgumentException("The stream cannot be seeked", nameof(stream));
    }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;stream.Seek(0, SeekOrigin.Begin);

JSObject image;

using (var memoryStream = new MemoryStream())
{
    stream.CopyTo(memoryStream);

    using (var array = Uint8Array.From(memoryStream.GetBuffer()))
    {
        image = (JSObject)canvasKit.Invoke("MakeImageFromEncoded", array);
    }
}

return image;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
```&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;CanvasKitImporter.DecodeImage()&lt;/code&gt; passes the underlying byte array to CanvasKit, which decodes the image&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Loading models like &lt;a href="https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/FlightHelmet"&gt;FlightHelmet&lt;/a&gt; took from minutes (15-30) with the tab frozen to less than 20 s. And it still takes too much for us, but we must recall the asset export &amp;amp; import process is untouched from the desktop code. We initially though the &lt;code&gt;ArrayPool.Rent(length)&lt;/code&gt; call was forcing Garbage Collector (GC) to pass and incurring in some seconds but, after isolating such calls, it is not the culprit at all. We still need to investigate here more in depth.&lt;/p&gt;

&lt;p&gt;&lt;img src="items/images/FlightHelmetDemoOptimized.gif" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;FlightHelmet model loaded (notice the ilumination)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;To the Web and beyond&lt;/h2&gt;

&lt;p&gt;Not everything is solved: loading time for very big models must be reduced, memory allocation must be decreased too, our WebGL abstraction can be faster as well. Nonetheless, this glTF viewer is our first public project made with Wave Engine 3.0 for the Web.&lt;/p&gt;

&lt;p&gt;We have pursued such during some time but the scenario was still not ready for the jump. Nowadays, we see a bunch of possibilities for helping our customers to take visual experiences into the browser, adding Web to the list of officially supported platforms.&lt;/p&gt;

&lt;p&gt;If you think we can help you reach the Web too, &lt;a href="https://waveengine.net/Company#Contact"&gt;we are here to listen&lt;/a&gt;. Oh, and if you found any issue, please &lt;a href="https://github.com/WaveEngine/Feedback/issues"&gt;report it&lt;/a&gt;. Thank you for reading.&lt;/p&gt;</description>
      <pubDate>Thu, 06 Feb 2020 23:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=2019-8-2</link>
      <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
      <title>The 'last' Visual Test #WaveEngine #WebGL #Wasm</title>
      <description>&lt;p&gt;Today we've reached a mid-term goal with our port of Wave Engine to WebGL: "every" visual test we agreed is currently
running —between quotes because the stencil one actually doesn't, and we need to go for a second round as we enabled
texture storage in the middle.&lt;/p&gt;

&lt;p&gt;This' for instance the last one:&lt;/p&gt;

&lt;p&gt;&lt;img src="items/images/FrameBufferTextureCubeTest.gif" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;At the beginning of the week I worked on passing a ReadOnlySpan&amp;lt;byte&amp;gt; to a few WebGL calls —as Juan recommended us
through Twitter. I started touching the transpiler, WebIDLToCSharp, but quickly noticed it wasn't worth as needs a
somewhat big change while such can be done at the backend side. Also, I'm not 100% sure will find any other approach
which's still better in performance.&lt;/p&gt;

&lt;p&gt;With the last visual test we've gotten ~30 fps so thinking on AOT is becoming a must. I'd like to research on this
sooner or later.&lt;/p&gt;</description>
      <pubDate>Thu, 01 Aug 2019 22:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=2019-7-26</link>
      <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
      <title>Wave Engine &amp; WebGL.NET status</title>
      <description>&lt;p&gt;After some months working on
&lt;a href="https://github.com/WaveEngine/WebGL.NET"&gt;WebGL.NET&lt;/a&gt; this Wednesday we've
finally created the first NuGet. I've been personally avoiding doing this
because we rely on some Mono's NuGets which are not public so anyone adding ours
will get a bunch of errors.&lt;/p&gt;

&lt;p&gt;However, we neeed such. Wave Engine was consuming WebGL through a submodule
inside a submodule and such dependency was breaking flow to some of my
workmates. I discussed this with Dani and found a medium-term solution:
- creating a private feed on Azure DevOps and put every Mono dependency there
  isolated, and
- publish WebGL.NET under preview and alert on above in a noticeable place -I
  think still noone has still used such but there it's :-)&lt;/p&gt;

&lt;p&gt;Also, I discovered this &lt;a href="http://deat.tk/jazz2/wasm/"&gt;game&lt;/a&gt; which's using our
project from sources and even have evolved it in some places. If people can
consume it through NuGet I believe will report issues back and we all can gain
from that. Eric Mellino's done something similar too, and provided good issues
:-)&lt;/p&gt;

&lt;p&gt;So, the NuGet is just there and it works. I must say we're close to complete
every low-level Wave Engine visual test on Wasm so it reforces the idea of
having WebGL.NET somewhat stable.&lt;/p&gt;

&lt;p&gt;Working on 2D &amp;amp; 3D textures this week I've written once and again this portion:
```csharp
IntPtr data = [...] // Imagine a large chunk of bytes
var colors = new byte[length];
Marshal.Copy(data, colors, colors.Length);&lt;/p&gt;

&lt;p&gt;GL.TexImage2D([...], colors);
```&lt;/p&gt;

&lt;p&gt;, and, obviously, this should be done &lt;em&gt;inside&lt;/em&gt; our binding, exposing a new
overload for passing pixels as &lt;code&gt;IntPtr&lt;/code&gt;. Actually OpenGL/ES does something
similar too.&lt;/p&gt;

&lt;p&gt;Today Miguel de Icaza has told us in Twitter Mono's Wasm bits will be launched
by the end of the year and that's great. Still the development workflow is rough
but for sure this will improve; however, even in this way, Wasm is a great
platform to target because of the browser-based and native execution tuple.&lt;/p&gt;</description>
      <pubDate>Thu, 25 Jul 2019 22:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=wasmapp1</link>
      <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
      <title>Your first Wasm app with C#</title>
      <description>&lt;p&gt;As part of our work with &lt;a href="https://github.com/WaveEngine/WebGL.NET"&gt;WebGL.NET&lt;/a&gt; have learned how to be aligned with 
Mono's latest Wasm progress. It's taking the shape of something which could make users File &gt; New and start creating 
apps with such but, still needs some progress. However, I ask my-self whether everyone out there would like to start 
writing C# to target Wasm but still not worrying on configuring their environment in any way.&lt;/p&gt;

&lt;p&gt;Frank Krueger and Jérôme Laban have made great works with their NuGets Ouui.Wasm and Uno.Wasm.Bootstrap, respectively, 
but as soon as you want to go deeper in JavaScript &amp;amp; .NET communication (consuming the DOM in a richer way, for 
instance), you'll surely enjoy having the peeper Mono is working on.&lt;/p&gt;

&lt;p&gt;For all this, I've set up &lt;a href="https://github.com/MarcosCobena/WasmApp1"&gt;WasmApp1&lt;/a&gt; repo, the minimum stuff needed I guess, 
to give all the power for targeting Wasm. You just can go and clone or download it, and start working. I'd like to 
keep it updated with the latest changes from Mono, but what I dream with is deleting such in the upcoming months 
because finally it's all integrated into stable, and File &gt; New &gt; Wasm App would be just there :-)&lt;/p&gt;

&lt;p&gt;In the meantime, this is a session for start running your app. The last command (&lt;code&gt;xsp4&lt;/code&gt;) serves the output folder at 
http://localhost:9000/, and it's Mono's integrated ASP.NET server for CLI, which comes with regular Mono downloads; 
you can use anything for serving such actually, or just upload it to your own web server:&lt;/p&gt;

&lt;p&gt;```cmd
C:\Users\Marcos\source\repos\WasmApp1&gt;dotnet build
Microsoft (R) Build Engine versión 15.8.169+g1ccb72aefa para .NET Core
Copyright (C) Microsoft Corporation. Todos los derechos reservados.&lt;/p&gt;

&lt;p&gt;Restauración realizada en 54,5 ms para C:\Users\Marcos\source\repos\WasmApp1\WasmApp1\WasmApp1.csproj.&lt;/p&gt;

&lt;p&gt;Compilación correcta.
    0 Advertencia(s)
    0 Errores&lt;/p&gt;

&lt;p&gt;Tiempo transcurrido 00:00:01.63&lt;/p&gt;

&lt;p&gt;C:\Users\Marcos\source\repos\WasmApp1&gt;xsp4 WasmApp1\bin\Debug\netstandard2.0\
xsp4
Listening on address: 0.0.0.0
Root directory: C:\Users\Marcos\source\repos\WasmApp1\WasmApp1\bin\Debug\netstandard2.0
Listening on port: 9000 (non-secure)
Hit Return to stop the server.&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Now browse http://localhost:9000/ in your prefered app (Wasm is widely supported) and enjoy!&lt;/p&gt;</description>
      <pubDate>Fri, 05 Jul 2019 22:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=unit-testing-webglnet</link>
      <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
      <title>Unit Testing WebGL.NET</title>
      <description>&lt;p&gt;Wow! It's been some time since I wrote here.&lt;/p&gt;

&lt;p&gt;While my mate Juan is working on the first actual Wave Engine 3.0 app with WebGL -he's already achieved the tricolor 
triangle, by the way- I've spent some time trying to set up something for unit testing the API. Eric Mellino, the guy 
from Veldrid, created 2 issues the other day about marshalling errors and, as I was thinking how to address them, I 
heavily noticed the need to avoid regressions such like those.&lt;/p&gt;

&lt;p&gt;The pair Mono Wasm and Unit Tests isn't an easy one: I tried to run Xunit's AssemblyRunner with no success -the browser 
always stucks on the discovering/execution process. Although I didn't debug it deeply (debugging isn't so easy either...
) my bet is Xunit relies on multiple ManualResetEvents and Wasm is monothread nowadays (I'm aware of Chrome's 
implementation but am trying to stick to the common one). I tried different attempts: going down the Xunit repo to find 
what was being executed internally but, in the end, got nothing.&lt;/p&gt;

&lt;p&gt;But came up with an idea: since Xunit has splitted the asserts thing as a separate NuGet I could build a small 
infrastructure to discover tests through reflection and depend on Xunit for the in-test experience. And voilá! 
&lt;a href="https://webglnet.surge.sh/tests/"&gt;Here&lt;/a&gt; it's (&lt;a href="https://github.com/WaveEngine/WebGL.NET/tree/master/src/Tests"&gt;this&lt;/a&gt; is 
the source code). I still have to fix the Linux build which's not publishing the tests/ dir at Surge but this is another
 page.&lt;/p&gt;

&lt;p&gt;Oh, the entire test set fails on my home machine, will have to look into that:&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;mono&lt;em&gt;wasm&lt;/em&gt;runtime&lt;em&gt;ready mono.js:7805:14
    ﻿4 tests found mono.js:2236:13
    Running 'GetErrorRegressionTest'... mono.js:2236:13
    System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---&gt; System.NullReferenceException: Object reference not set to an instance of an object. mono.js:2236:13
      at WebGLDotNET.WebGLRenderingContextBase.Invoke (System.String method, System.Object[] args) [0x00009] in /Users/marcos/Repositorios/WebGL.NET/src/WebGLDotNET/WebGL.Backend.cs:127 mono.js:2236:13
      at WebGLDotNET.WebGLRenderingContextBase.InvokeForBasicType[T] (System.String method, System.Object[] args) [0x00001] in /Users/marcos/Repositorios/WebGL.NET/src/WebGLDotNET/WebGL.Backend.cs:154 mono.js:2236:13
      at WebGLDotNET.WebGLRenderingContextBase.GetError () [0x00000] in /Users/marcos/Repositorios/WebGL.NET/src/WebGLDotNET/WebGL.cs:810 mono.js:2236:13
      at Tests.TheTests.GetErrorRegressionTest () [0x00001] in /Users/marcos/Repositorios/WebGL.NET/src/Tests/TheTests.cs:19 mono.js:2236:13
      at (wrapper managed-to-native) System.Reflection.RuntimeMethodInfo.InternalInvoke(System.Reflection.RuntimeMethodInfo,object,object[],System.Exception&amp;amp;) mono.js:2236:13
      at System.Reflection.RuntimeMethodInfo.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x0006a] in /mnt/jenkins/workspace/test-mono-mainline-wasm/label/ubuntu-1804-amd64/mcs/class/corlib/System.Reflection/RuntimeMethodInfo.cs:395 mono.js:2236:13
       --- End of inner exception stack trace --- mono.js:2236:13
      at System.Reflection.RuntimeMethodInfo.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00081] in /mnt/jenkins/workspace/test-mono-mainline-wasm/label/ubuntu-1804-amd64/mcs/class/corlib/System.Reflection/RuntimeMethodInfo.cs:409 mono.js:2236:13
      at System.Reflection.MethodBase.Invoke (System.Object obj, System.Object[] parameters) [0x00000] in /mnt/jenkins/workspace/test-mono-mainline-wasm/label/ubuntu-1804-amd64/external/corefx/src/Common/src/CoreLib/System/Reflection/MethodBase.cs:53 mono.js:2236:13
      at Tests.Program.Main () [0x000e2] in /Users/marcos/Repositorios/WebGL.NET/src/Tests/Program.cs:34 mono.js:2236:13
    Failed! mono.js:2236:13
    Running 'GetUniformBlockIndexRegressionTest'... mono.js:2236:13
    System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---&gt; System.NullReferenceException: Object reference not set to an instance of an object. mono.js:2236:13
      at WebGLDotNET.WebGLRenderingContextBase.Invoke[T] (System.String method, System.Object[] args) [0x00009] in /Users/marcos/Repositorios/WebGL.NET/src/WebGLDotNET/WebGL.Backend.cs:137 mono.js:2236:13
      at WebGLDotNET.WebGLRenderingContextBase.CreateProgram () [0x00000] in /Users/marcos/Repositorios/WebGL.NET/src/WebGLDotNET/WebGL.cs:744 mono.js:2236:13
      at Tests.TheTests.GetUniformBlockIndexRegressionTest () [0x00001] in /Users/marcos/Repositorios/WebGL.NET/src/Tests/TheTests.cs:27 mono.js:2236:13
      at (wrapper managed-to-native) System.Reflection.RuntimeMethodInfo.InternalInvoke(System.Reflection.RuntimeMethodInfo,object,object[],System.Exception&amp;amp;) mono.js:2236:13
      at System.Reflection.RuntimeMethodInfo.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x0006a] in /mnt/jenkins/workspace/test-mono-mainline-wasm/label/ubuntu-1804-amd64/mcs/class/corlib/System.Reflection/RuntimeMethodInfo.cs:395 mono.js:2236:13
       --- End of inner exception stack trace --- mono.js:2236:13
      at System.Reflection.RuntimeMethodInfo.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00081] in /mnt/jenkins/workspace/test-mono-mainline-wasm/label/ubuntu-1804-amd64/mcs/class/corlib/System.Reflection/RuntimeMethodInfo.cs:409 mono.js:2236:13
      at System.Reflection.MethodBase.Invoke (System.Object obj, System.Object[] parameters) [0x00000] in /mnt/jenkins/workspace/test-mono-mainline-wasm/label/ubuntu-1804-amd64/external/corefx/src/Common/src/CoreLib/System/Reflection/MethodBase.cs:53 mono.js:2236:13
      at Tests.Program.Main () [0x000e2] in /Users/marcos/Repositorios/WebGL.NET/src/Tests/Program.cs:34 mono.js:2236:13
    Failed! mono.js:2236:13
    Running 'BindBufferRangeRegressionTest'... mono.js:2236:13
    System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---&gt; System.NullReferenceException: Object reference not set to an instance of an object. mono.js:2236:13
      at WebGLDotNET.WebGLRenderingContextBase.Invoke[T] (System.String method, System.Object[] args) [0x00009] in /Users/marcos/Repositorios/WebGL.NET/src/WebGLDotNET/WebGL.Backend.cs:137 mono.js:2236:13
      at WebGLDotNET.WebGLRenderingContextBase.CreateBuffer () [0x00000] in /Users/marcos/Repositorios/WebGL.NET/src/WebGLDotNET/WebGL.cs:740 mono.js:2236:13
      at Tests.TheTests.BindBufferRangeRegressionTest () [0x00001] in /Users/marcos/Repositorios/WebGL.NET/src/Tests/TheTests.cs:34 mono.js:2236:13
      at (wrapper managed-to-native) System.Reflection.RuntimeMethodInfo.InternalInvoke(System.Reflection.RuntimeMethodInfo,object,object[],System.Exception&amp;amp;) mono.js:2236:13
      at System.Reflection.RuntimeMethodInfo.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x0006a] in /mnt/jenkins/workspace/test-mono-mainline-wasm/label/ubuntu-1804-amd64/mcs/class/corlib/System.Reflection/RuntimeMethodInfo.cs:395 mono.js:2236:13
       --- End of inner exception stack trace --- mono.js:2236:13
      at System.Reflection.RuntimeMethodInfo.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00081] in /mnt/jenkins/workspace/test-mono-mainline-wasm/label/ubuntu-1804-amd64/mcs/class/corlib/System.Reflection/RuntimeMethodInfo.cs:409 mono.js:2236:13
      at System.Reflection.MethodBase.Invoke (System.Object obj, System.Object[] parameters) [0x00000] in /mnt/jenkins/workspace/test-mono-mainline-wasm/label/ubuntu-1804-amd64/external/corefx/src/Common/src/CoreLib/System/Reflection/MethodBase.cs:53 mono.js:2236:13
      at Tests.Program.Main () [0x000e2] in /Users/marcos/Repositorios/WebGL.NET/src/Tests/Program.cs:34 mono.js:2236:13
    Failed! mono.js:2236:13
    Running 'BufferSubDataRegressionTest'... mono.js:2236:13
    System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---&gt; System.NullReferenceException: Object reference not set to an instance of an object. mono.js:2236:13
      at WebGLDotNET.WebGLRenderingContextBase.Invoke (System.String method, System.Object[] args) [0x00009] in /Users/marcos/Repositorios/WebGL.NET/src/WebGLDotNET/WebGL.Backend.cs:127 mono.js:2236:13
      at WebGLDotNET.WebGLRenderingContextBase.BufferSubData (System.UInt32 target, System.UInt32 offset, System.Array data) [0x00000] in /Users/marcos/Repositorios/WebGL.NET/src/WebGLDotNET/WebGL.cs:716 mono.js:2236:13
      at Tests.TheTests.BufferSubDataRegressionTest () [0x00008] in /Users/marcos/Repositorios/WebGL.NET/src/Tests/TheTests.cs:41 mono.js:2236:13
      at (wrapper managed-to-native) System.Reflection.RuntimeMethodInfo.InternalInvoke(System.Reflection.RuntimeMethodInfo,object,object[],System.Exception&amp;amp;) mono.js:2236:13
      at System.Reflection.RuntimeMethodInfo.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x0006a] in /mnt/jenkins/workspace/test-mono-mainline-wasm/label/ubuntu-1804-amd64/mcs/class/corlib/System.Reflection/RuntimeMethodInfo.cs:395 mono.js:2236:13
       --- End of inner exception stack trace --- mono.js:2236:13
      at System.Reflection.RuntimeMethodInfo.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00081] in /mnt/jenkins/workspace/test-mono-mainline-wasm/label/ubuntu-1804-amd64/mcs/class/corlib/System.Reflection/RuntimeMethodInfo.cs:409 mono.js:2236:13
      at System.Reflection.MethodBase.Invoke (System.Object obj, System.Object[] parameters) [0x00000] in /mnt/jenkins/workspace/test-mono-mainline-wasm/label/ubuntu-1804-amd64/external/corefx/src/Common/src/CoreLib/System/Reflection/MethodBase.cs:53 mono.js:2236:13
      at Tests.Program.Main () [0x000e2] in /Users/marcos/Repositorios/WebGL.NET/src/Tests/Program.cs:34 mono.js:2236:13
    Failed! mono.js:2236:13
    0/4 tests passed mono.js:2236:13
    Error: WebGL warning: getContext: Disallowing antialiased backbuffers due to blacklisting. mono.js:9089:18
    Error: WebGL warning: &lt;SetDimensions&gt;: Refused to create WebGL2 context because of blacklist entry: FEATURE&lt;/em&gt;FAILURE&lt;em&gt;NV&lt;/em&gt;W7&lt;em&gt;15 mono.js:9089:18
    Error: WebGL warning: &lt;SetDimensions&gt;: Failed to create WebGL context: WebGL creation failed: 
    * Refused to create WebGL2 context because of blacklist entry: FEATURE&lt;/em&gt;FAILURE&lt;em&gt;NV&lt;/em&gt;W7&lt;em&gt;15 mono.js:9089:18
    Error: WebGL warning: getContext: Disallowing antialiased backbuffers due to blacklisting. mono.js:9089:18
    Error: WebGL warning: &lt;SetDimensions&gt;: Refused to create WebGL2 context because of blacklist entry: FEATURE&lt;/em&gt;FAILURE&lt;em&gt;NV&lt;/em&gt;W7&lt;em&gt;15 mono.js:9089:18
    Error: WebGL warning: &lt;SetDimensions&gt;: Failed to create WebGL context: WebGL creation failed: 
    * Refused to create WebGL2 context because of blacklist entry: FEATURE&lt;/em&gt;FAILURE&lt;em&gt;NV&lt;/em&gt;W7&lt;em&gt;15 mono.js:9089:18
    Error: WebGL warning: getContext: Disallowing antialiased backbuffers due to blacklisting. mono.js:9089:18
    Error: WebGL warning: &lt;SetDimensions&gt;: Refused to create WebGL2 context because of blacklist entry: FEATURE&lt;/em&gt;FAILURE&lt;em&gt;NV&lt;/em&gt;W7&lt;em&gt;15 mono.js:9089:18
    Error: WebGL warning: &lt;SetDimensions&gt;: Failed to create WebGL context: WebGL creation failed: 
    * Refused to create WebGL2 context because of blacklist entry: FEATURE&lt;/em&gt;FAILURE&lt;em&gt;NV&lt;/em&gt;W7&lt;em&gt;15 mono.js:9089:18
    Error: WebGL warning: getContext: Disallowing antialiased backbuffers due to blacklisting. mono.js:9089:18
    Error: WebGL warning: &lt;SetDimensions&gt;: Refused to create WebGL2 context because of blacklist entry: FEATURE&lt;/em&gt;FAILURE&lt;em&gt;NV&lt;/em&gt;W7&lt;em&gt;15 mono.js:9089:18
    Error: WebGL warning: &lt;SetDimensions&gt;: Failed to create WebGL context: WebGL creation failed: 
    * Refused to create WebGL2 context because of blacklist entry: FEATURE&lt;/em&gt;FAILURE&lt;em&gt;NV&lt;/em&gt;W7_15 mono.js:9089:18
    ```&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;</description>
      <pubDate>Thu, 27 Jun 2019 22:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=pr-reviews</link>
      <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
      <title>Pull-Request reviews</title>
      <description>&lt;p&gt;I've being feeling lately am spending too much effort in cosmetic stuff which add low value instead of concentrating in logic, algorithms.&lt;/p&gt;

&lt;p&gt;Serve this as my personal reminder for how to take a PR review:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If I detect something doesn't conform the style guidelines, instead of adding a comment:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;think of enforcing such rule in any way: through Git hooks, StyleCop, etc. It's important to consider how much time you'd earn by enabling such instead of once and again adding similar comments in future PRs; or&lt;/li&gt;
&lt;li&gt;add an in-line comment to leverage this which, indeed, will arrive to the rest of team as well: for example:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;```c#
// Marcos says: below fields are ordered alphabetically to easily allow us search
public const string AppCenterKey = "bar";&lt;/p&gt;

&lt;p&gt;public const string APIKey = "foo";
```&lt;/p&gt;

&lt;p&gt;​ ; or&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;simply write this down in any communication channel your team has: a Slack/Teams conversation, during tomorrow daily, etc.; or&lt;/li&gt;
&lt;li&gt;forget your impulse, just keep scrolling down because there for sure will be things far more interesting to consider&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      <pubDate>Tue, 19 Feb 2019 23:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=goto</link>
      <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
      <title>GoTo</title>
      <description>&lt;p&gt;While I was studying Computer Science had one subject named Computability Theory where it was introduced a quite simple, at the beginning, language: GOTO. Its target was to demonstrate whether a function could be expressed using such —then called GOTO-computable— thus such could be calculated by a computer. (My teachers may kill me because how I've summed things up but think it's somewhat valid :-)&lt;/p&gt;

&lt;p&gt;By that time I wrote an interpreter in JavaScript (which may reside in one of my multiple back-ups) and quickly sent it to my teachers, thinking maybe any student could eventually find it useful. My programming abilities were weak by then and, for instance, I relied the parsing on regular expressions —you can imagine how strong my implementation was...&lt;/p&gt;

&lt;p&gt;A few months ago, and pushed by &lt;a href="https://praeclarum.org/2018/08/27/oops-i-wrote-a-c-compiler.html"&gt;Fran Krueger's CLanguage article&lt;/a&gt;, I found it attractive to spent my spare time working on a more solid compiler which, how not, would target .NET ecosystem. Also because I've always had curiosity on how &lt;code&gt;System.Reflection.Emit&lt;/code&gt; works and saw a chance to learn it deeper.&lt;/p&gt;

&lt;h4&gt;Language&lt;/h4&gt;

&lt;p&gt;GOTO's quite simple: you add or subtract 1, jump anywhere or nothing —this' one the aspects why I said it can fit for children. This could be the Hello World in GOTO:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
Y = Y + 1
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The vars you can play with are simple too: input ones, aux ones and one output. And I'm sure you've already figured their notations out: &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;Z&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt;, in the same order.&lt;/p&gt;

&lt;p&gt;The entire language specification can be found &lt;a href="https://github.com/MarcosCobena/GoTo/wiki/Language"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Parsing&lt;/h4&gt;

&lt;p&gt;Also during University I learned Antlr, through Java, up to building a small BASIC interpreter. After some Google-ing I discovered there's a .NET backend for it, which's .NET Standard by the way, so decided to go with it as my parsing infrastructure.&lt;/p&gt;

&lt;p&gt;The only language definition I have's the one my teachers still use in Computer Science and Mathematics courses, which's formal in its description but lacks a formal side to be used for actual programming, so my first steps were popping a grammar with lexer and parser rules of what I wanted to achieve. As an example, this' the way conditional instructions are detected:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
instruction : [...]
    | 'IF' var=ID '!=' '0' 'GOTO' label=ID #ConditionalInstruction
    [...]
    ;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I've iterated a lot the grammar during this time, refactoring once and again, reaching a point where it feels comfortable for further passes such like the semantic one.&lt;/p&gt;

&lt;h4&gt;Semantic Analysis&lt;/h4&gt;

&lt;p&gt;There are a bunch of rules which aren't permitted in GOTO, for instance using different vars in the same instruction:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
X2 = X3 + 1
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Hey, I told you GOTO was simple! Allowing above, however, can be easily achieved with something we'll see later on; however, it's not allowed by definition.&lt;/p&gt;

&lt;p&gt;The semantic analysis, along with the lexing and parsing, produces error messages. You're already familiar with compiler errors and recognize the line, column and message they use to come with. I've based my-self on this idea for GOTO too, where the compiler returns a collection of messages with that information and, for the sake of future iterations, its severity: error or simply a warning —truth be told I've still not used this last :-D&lt;/p&gt;

&lt;h4&gt;Abstract Syntax Tree&lt;/h4&gt;

&lt;p&gt;My initial idea was to directly throw IL while visiting the parsing tree and, quickly, noticed it wasn't the best way to go. I needed to build an AST: a parsing-free tree representation which's ready for further steps, i.e. code generation.&lt;/p&gt;

&lt;p&gt;Lucky of me GOTO's so small a flat collection of nodes do the job quite good in my opinion: instead of having an AST it actually manages instruction nodes where, now yes, are helpful by the time of translating into IL.&lt;/p&gt;

&lt;p&gt;As a curious thing, I've ended up solving one or two semantic analysis over the "AST" instead of before, because simply having this new data structure's made easier the job: GOTO doesn't allow referencing labels in conditional instructions which aren't defined anywhere (I've allowed before or after, both), and checking this' something like:&lt;/p&gt;

&lt;p&gt;```c#
public static void CheckMissingLabel(ProgramNode program, ref List&lt;Message&gt; messages)
{
    var conditionals = program.Instructions
        .Where(item =&gt; item is ConditionalInstructionNode node &amp;amp;&amp;amp; 
            !node.TargetLabel.Equals(Settings.ExitLabel.ToString()))
        .Cast&lt;ConditionalInstructionNode&gt;();
    var labels = program.Instructions
        .Cast&lt;InstructionNode&gt;()
        .Select(item =&gt; item.Label);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foreach (var item in conditionals)
{
    if (!labels.Contains(item.TargetLabel))
    {
        var message = new Message(
            SeverityEnum.Error,
            $"The conditional instruction cannot target missing label {item.TargetLabel}.",
            item.Line,
            item.Column);
        messages.Add(message);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
```&lt;/p&gt;

&lt;h4&gt;Code Generation&lt;/h4&gt;

&lt;p&gt;Let's say our program has no errors and we're ready to throw IL —Intermediate Language, the byte-code .NET runtime understands. My idea's always been to have a CLI interface —&lt;em&gt;a la&lt;/em&gt; Microsoft's &lt;code&gt;csc&lt;/code&gt;, Mono's &lt;code&gt;mcs&lt;/code&gt;— where I could compile programs quickly. However, while the time passed, I noticed also wanted to quickly run my programs, so had to decide what I actually wanted to generate.&lt;/p&gt;

&lt;p&gt;The main, and think only, difference between EXE and DLL files in .NET resides in the first having an entry-point on where the CLR knows has to start executing; the DLLs simply don't have such. If I wanted to allow people reuse their programs with, let's say, F# an EXE wouldn't be so useful, but yes a DLL: it can be consumable everywhere —except under iOS devices, although have to double-check this, because of Frank's Continuous. In the other hand, a DLL can't be easily runnable: I'd have to create a new project, reference such and write code to call it.&lt;/p&gt;

&lt;p&gt;I decided to stick with the DLL. It's curious how &lt;a href="http://www.drdobbs.com/generating-code-at-run-time-with-reflect/184416570"&gt;the best article I read&lt;/a&gt; to leverage my &lt;code&gt;System.Reflection.Emit&lt;/code&gt; knowledge's been this from 2002! Even I still have serious concerns whether was the same article I read seventeen years ago (17)... Good stuff never passes by.&lt;/p&gt;

&lt;p&gt;Summing up: I've copied &lt;code&gt;dotnet&lt;/code&gt; command idea, and provided the handy &lt;code&gt;gotool&lt;/code&gt; one:&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;gotool
  GOTO-ol&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Usage: gotool.exe option ...
- option: build, run&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;If you want to build a program just pass "build" and the program path and go. Once you have the output DLL, just pass "run", the DLL path and an input value and go. This'd be a typical session:&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;type HelloWorld.goto
  Y = Y + 1
  gotool build HelloWorld.goto
  GOTO-ol&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Success! HelloWorld.dll&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;gotool run HelloWorld.dll 0
  GOTO-ol&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1
```&lt;/p&gt;

&lt;h4&gt;Macros&lt;/h4&gt;

&lt;p&gt;For example, GOTO allows conditional instructions asking whether a var is 0 but, could we turn such inconditional —i.e. independant of the value? Sure:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
Z = Z + 1
IF Z != 0 GOTO L
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This' known as the GOTO macro. Then, how can we use it?&lt;/p&gt;

&lt;p&gt;Simply consider it as any other instruction within a program:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
GOTO A
Y = Y + 1
[A] X = X + 1
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Because I had no origin on how macros could be expressed in a formal way —with formal I mean doable with a computer— I ended up creating a simple schema, where macros are defined by replacing those symbols at its signature:&lt;/p&gt;

&lt;p&gt;```
MACRO GOTO L
Z = Z + 1
IF Z != 0 GOTO L
END&lt;/p&gt;

&lt;p&gt;GOTO A
Y = Y + 1
[A] X = X + 1
```&lt;/p&gt;

&lt;h4&gt;IDE&lt;/h4&gt;

&lt;p&gt;Saying I've been working on an IDE for GoTo's very pretentious I guess. Having the CLI wasn't so much funny for me as having something in the browser where I could start writing GOTO and running it by a single click.&lt;/p&gt;

&lt;p&gt;I had already played with Frank's Ooui and since my daily job consists on 99% Xamarin.Forms it's been a pleasure path to travel by.&lt;/p&gt;

&lt;p&gt;Although my initial idea was to rely in WebAssembly —mostly to avoid any different hosting from my web one— I couldn't take this road because &lt;code&gt;System.Reflection&lt;/code&gt; dependencies aren't supported in that scenario. What did I do then? No problem, Ooui offers an ASP.NET backend which communicates through Web Sockets. And this way GoTo Studio, as I named it, has been working until yesterday night.&lt;/p&gt;

&lt;p&gt;One of the bugs I had was the lack of control on infinite loops: it's not a problem with the CLI, but it's actually one with Web Sockets: my Azure App Service tier (the free one) provided 5 simultaneous connections so blocking such with 5 different endless loops made the entire website break.&lt;/p&gt;

&lt;p&gt;Two days ago I started writing a small interpreter —I really like to call it a Virtual Machine— which, taking advantage of the AST representation, runs the program step by step. Since now I have control on such, I've set a limit on the steps to, now yes, break those infinite loops on time.&lt;/p&gt;

&lt;p&gt;To assure programs compiled into IL and run by .NET CLR have the same results as those interpreted by its own VM I made some small changes into the Unit Tests, where the same set passes —and actually pass in green— for both.&lt;/p&gt;

&lt;p&gt;You can now use &lt;a href="https://marcoscobena.com/goto-studio/"&gt;GoTo Studio&lt;/a&gt; without worry on leaving it useless :-)&lt;/p&gt;

&lt;h4&gt;Conclusions&lt;/h4&gt;

&lt;p&gt;I've learned a lot with this personal project and above I discuss most of the technical aspects I've touched. However, it's in the human side where I most gain I think: having something I do just for pleasure and which doesn't conform to any rule further than providing joy to my-self is being a beautiful discover.&lt;/p&gt;

&lt;p&gt;While working on this I got the idea —a bunch of ideas actually— this could serve for children to learn programming, and this motivates me even more to continue ~~working~~ playing.&lt;/p&gt;

&lt;p&gt;Thanks to my mates at Plain Concepts which detected some bugs and helped me making GoTo Studio easier to use. And to my beautiful fiancee for encouraging me to go deep on this: I'd really like, one day, to teach our children how computer works with this project :,-)&lt;/p&gt;</description>
      <pubDate>Thu, 03 Jan 2019 23:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=xf-xaml</link>
      <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
      <title>Xamarin.Forms XAML</title>
      <description>&lt;p&gt;In the same way we continuously refactor our C# code we should trait XAML one equally. As we layout screens there uses to be pieces which can be reused here and there. After some years working with Xamarin.Forms —plus some more with WPF and co.— I've learnt from others, and my own experience, how to scaffold good XAML which maintains its good shape as time goes by.&lt;/p&gt;

&lt;p&gt;Split into chapters, I'll try to cover everything expressed in XAML:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="?i=xf-xaml"&gt;Xaml Styler and App structure (this one)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="?i=xf-xaml-colors"&gt;Colors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="?i=xf-xaml-control-templates"&gt;Control Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="?i=xf-xaml-converters"&gt;Converters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="?i=xf-xaml-font-styles"&gt;Font Styles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="?i=xf-xaml-global-styles"&gt;Global Styles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="?i=xf-xaml-sizes"&gt;Sizes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="?i=xf-xaml-styles"&gt;Styles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Xaml Styler&lt;/h3&gt;

&lt;p&gt;Thanks to &lt;a href="https://twitter.com/danimart1991"&gt;Daniel Martín&lt;/a&gt; we've been using &lt;a href="https://github.com/Xavalon/XamlStyler"&gt;Xaml Styler&lt;/a&gt; in &lt;a href="https://github.com/Microsoft/TailwindTraders-Mobile/tree/develop/Source/Tools/XamlStyler"&gt;our last project&lt;/a&gt;. Xaml Styler's not StyleCop: it doesn't throw errors on bad formatting but rewrites everything to conform the guidelines. My mate &lt;a href="https://twitter.com/jacano35"&gt;Juan Antonio Cano&lt;/a&gt; &lt;a href="https://github.com/jacano/XamlStyler"&gt;forked it&lt;/a&gt; and added the "verify" option: now it can be used within a build pipeline and stop such on styling errors. For us App Center's &lt;a href="https://github.com/Microsoft/TailwindTraders-Mobile/blob/develop/Source/TailwindTraders.Mobile/TailwindTraders.Mobile.Android/appcenter-post-clone.sh"&gt;post-clone scripts&lt;/a&gt; have fit superb.&lt;/p&gt;

&lt;p&gt;Since I work entirely on macOS there's no built-in option for Xaml Styler at Visual Studio for Mac, so I came up with this Custom Tool which I quickly run by &lt;code&gt;Alt&lt;/code&gt;+&lt;code&gt;X&lt;/code&gt; &lt;code&gt;Alt&lt;/code&gt;+&lt;code&gt;S&lt;/code&gt; —I passed from having a Terminal which runs a bash script into this, which's a good step:&lt;/p&gt;

&lt;p&gt;&lt;img src="items/images/XamlStylerCustomTool.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The full Arguments: &lt;code&gt;../Tools/XamlStyler/XamlStyler.Console/xstyler.exe -c CodeAnalysis/XamlStylerSettings.json -d . -r true&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/Microsoft/TailwindTraders-Mobile/blob/develop/Source/TailwindTraders.Mobile/CodeAnalysis/XamlStylerSettings.json"&gt;Xaml Styler's JSON&lt;/a&gt; has still stuff to do with Visual Studio for Windows which could ideally be ripped in favor of a more agnostic flavour; however, they hurt nothing.&lt;/p&gt;

&lt;p&gt;My only concern currently is why Visual Studio for Mac doesn't like setting the column width to 2 spaces, and continuously tries to make me work at 4. This' something I still have to study deeper.&lt;/p&gt;

&lt;p&gt;Appart from above, these are some other rules I try to follow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;120 chars per line; it helps us work with multiple files openned as columns —and is consistent with the same rule on C# files&lt;/li&gt;
&lt;li&gt;Empty lines around XML nodes: look below how for instance &lt;code&gt;Label&lt;/code&gt; breezes inside the &lt;code&gt;ContentView&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;```xaml
&lt;ContentView VerticalOptions="Start"&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ContentView.Padding&amp;gt;

    &amp;lt;Thickness
        Top="{StaticResource DefaultMargin}"
        Right="{StaticResource DefaultMargin}"
        Bottom="{StaticResource DefaultMargin}" /&amp;gt;

&amp;lt;/ContentView.Padding&amp;gt;

&amp;lt;Label x:Name="theLabel"
    Text="{Binding Key}"
    Style="{StaticResource 20BoldFontStyle}"
    TextColor="{StaticResource WhiteColor}" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/ContentView&gt;
```&lt;/p&gt;

&lt;h3&gt;App.xaml&lt;/h3&gt;

&lt;p&gt;At the opposite of what we'd think, I've found better with time to leave this file "empty". The quotes mean it's actually not empty, but blends other sources which do have XAML of value inside.&lt;/p&gt;

&lt;p&gt;This, for example, is a typical App.xaml:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;xaml
&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;
&amp;lt;Application 
    xmlns="http://xamarin.com/schemas/2014/forms"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:local="clr-namespace:XamarinCrumbs.XamarinForms"
    x:Class="XamarinCrumbs.XamarinForms.App"&amp;gt;
    &amp;lt;Application.Resources&amp;gt;
        &amp;lt;ResourceDictionary&amp;gt;
            &amp;lt;ResourceDictionary.MergedDictionaries&amp;gt;
                &amp;lt;local:Colors /&amp;gt;
                &amp;lt;local:ControlTemplates /&amp;gt;
                &amp;lt;local:Converters /&amp;gt;
                &amp;lt;local:FontStyles /&amp;gt;
                &amp;lt;local:GlobalStyles /&amp;gt;
                &amp;lt;local:Sizes /&amp;gt;
                &amp;lt;local:Styles /&amp;gt;
            &amp;lt;/ResourceDictionary.MergedDictionaries&amp;gt;
        &amp;lt;/ResourceDictionary&amp;gt;
    &amp;lt;/Application.Resources&amp;gt;
&amp;lt;/Application&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Whoever may open this file for the first time will quickly know how stuff's placed within the project.&lt;/p&gt;</description>
      <pubDate>Thu, 20 Dec 2018 23:00:00 Z</pubDate>
    </item>
    <item>
      <link>https://marcoscobena.com/?i=exceptions-to-exceptions</link>
      <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
      <title>Exceptions to Exceptions (Xamarin)</title>
      <description>&lt;p&gt;A few weeks? ago I read &lt;a href="https://people.gnome.org/~federico/blog/propagating-errors.html"&gt;Federico's post&lt;/a&gt; on how they're handling errors with Rust —moving from C to Rust in librsvg, one the Gnome core libraries. I liked the article by it-self, because analyzes from 0 different approaches and, in the end, points to another one on how Midori did the same —for those who like me didn't know what Midori was: a Microsoft Research project to vertically analyze how an OS could be rewritten in managed code.&lt;/p&gt;

&lt;p&gt;When making apps with Xamarin, and I guess this' shared among every framework, there's a moment when you need to retrieve data from an API, making a HTTP call, and things can go wrong.&lt;/p&gt;

&lt;p&gt;One of my first implementations was something similar to —imagine we're in a ViewModel:&lt;/p&gt;

&lt;p&gt;```c#
private async Task LoadDataAsync()
{
    ResultDTO result;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try
{
    // Think of refitAPI as a static readonly field
    result = await refitAPI.GetAsync();
}
catch (Exception exception)
{
    await DisplayAlertAsync("Ops, something went wrong. Thanks for your patience.");
}

if (result == null)
{
    return;
}

// Here we assign result to a prop binded to the view
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
```&lt;/p&gt;

&lt;p&gt;From the user perspective she shouldn't worry because anything that could go wrong is handled, although is presented with a generic valueless alert. It can also happen the API call ends just fine but it returns &lt;code&gt;null&lt;/code&gt; —it can happen if the JSON payload is empty, for instance. We should tell the user something about this too...&lt;/p&gt;

&lt;p&gt;My desk-mate &lt;a href="https://twitter.com/sescaladab"&gt;Sergio&lt;/a&gt; shared with me his tooling to better handle all this stuff, which we've been using in &lt;a href="https://github.com/Microsoft/TailwindTraders-Mobile"&gt;Tailwind Traders&lt;/a&gt;, where the API call is boxed and a more appropriate return value is obtained:&lt;/p&gt;

&lt;p&gt;```c#
private async Task LoadDataAsync()
{
    var result = await TryExecuteWithLoadingIndicatorsAsync(refitAPI.GetAsync);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (!result.IsSucceeded || result.Result == null)
{
    return;
}

// Here we assign result to a prop binded to the view
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
```&lt;/p&gt;

&lt;p&gt;This' a great improvement because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we no longer are in charge of handling the different exceptions on each API call;&lt;/li&gt;
&lt;li&gt;when having such, there's a standard way to present such to our users;&lt;/li&gt;
&lt;li&gt;the returning value has better semantics —i.e. &lt;code&gt;IsSucceeded&lt;/code&gt;; and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IsBusy&lt;/code&gt; is handled too so it'll end up on a loading overlay giving feedback&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While I was reading Federico's article, and Midori one, it called my attention how we were using a somewhat similar approach to them —saving the distance—, but they both have a language which's richer in error handling. Our, C#, heavily works on unchecked exceptions: each method can return any exception and there's no way of noticing that in develop-time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we can read the method documentation header, as we use to do with such coming from the .NET Framework it-self; or&lt;/li&gt;
&lt;li&gt;we can disassemble it and see what it's internally doing, although we can't guarantee there's a inner call which does throw any other one&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Java, for instance, forces developers to explicitly type which exceptions a method may throw. It's quite verbose —it's been ~10 years since I don't write Java code— but makes us think what to do with them.&lt;/p&gt;

&lt;p&gt;Using the hype those articles promoted in my interior I went to NuGet home and typed "Rust" in the search box. I found &lt;a href="https://www.nuget.org/packages/CSharp.OperationResult"&gt;CSharp.OperationResult&lt;/a&gt; project, which takes Rust approach into C# and, while I don't see the point on heavily relying in such everywhere in our projects, I do see its great value with above examples.&lt;/p&gt;

&lt;p&gt;(Its owner has merged our &lt;a href="https://github.com/gnaeus/OperationResult/pull/1#issuecomment-447576656"&gt;PR moving the lib into .NET Standard&lt;/a&gt; and there'll be a new NuGet soon.)&lt;/p&gt;

&lt;p&gt;This week I've spent a few hours rewriting our &lt;a href="https://github.com/Microsoft/TailwindTraders-Mobile/blob/feature/163-product-detail/Source/TailwindTraders.Mobile/TailwindTraders.Mobile/Framework/TaskHelper.cs"&gt;TaskHelper&lt;/a&gt; class by moving from our &lt;code&gt;WrapResult&lt;/code&gt; class to &lt;code&gt;Result&lt;/code&gt; and &lt;code&gt;Status&lt;/code&gt;, which reduces even more the code needed at ViewModel level but makes beautiful the one at the inner implementation:&lt;/p&gt;

&lt;p&gt;```c#
public async Task&lt;Result&lt;T&gt;&gt; TryWithErrorHandlingAsync&lt;T&gt;(
    Task&lt;T&gt; task,
    Func&lt;Exception, Task&lt;bool&gt;&gt; customErrorHandler = null)
{
    whenStarting?.Invoke();&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (!connectivityService.IsThereInternet)
{
    loggingService?.Warning("There's no Internet access");
    return Error();
}

try
{
    T actualResult = await task;
    return Ok(actualResult);
}
// Here goes multiple catches for each error scenario, alerting users accordingly

whenFinished?.Invoke();

return Error();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
```&lt;/p&gt;

&lt;p&gt;From above method perspective anyone can quickly understand where things are leaving OK and where don't: &lt;code&gt;Ok&lt;/code&gt; and &lt;code&gt;Error&lt;/code&gt; methods speak for them-selves. But, more important, consumers from outside don't have to worry on catching exceptions, but wiring the result or alerting valuable information on what went wrong and could they could do then.&lt;/p&gt;

&lt;p&gt;I think am personally in a phase where don't want to fill my code of try/catch everywhere, I prefer to leave things happen while I'm developing and, trust time will tell me which exceptions I should worry on. I too see the point on protecting that sensible stuff which could definitely go wrong don't know currently why however. I'm curious on what other feel on this area, which's the pros and cons of their work with errors and what are the findings while walking in that direction.&lt;/p&gt;</description>
      <pubDate>Fri, 14 Dec 2018 23:00:00 Z</pubDate>
    </item>
  </channel>
</rss>