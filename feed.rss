<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel><title>Marcos Cobeña Morián</title>
<description>I write software to solve people's problems</description>
<link>https://marcoscobena.com</link>
<item>
  <title>Xamarin.Forms XAML: Font Styles</title>
  <guid>https://marcoscobena.com/?i=xf-xaml-font-styles</guid>
  <description>&lt;h3&gt;FontStyles.xaml&lt;/h3&gt;

&lt;p&gt;Dealing with fonts can be a tricky part: because the app shows font faces different from the respective OS' ones, or because the Design specs have multiple sizes, for example.&lt;/p&gt;

&lt;p&gt;You can define here every font the app may need. This will help you refactor sizes, for instance, much more easier —although for sizes I strongly recommend to consider &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/xamarin.forms.namedsize?view=xamarin-forms"&gt;named sizes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Conventions:
- Key: {FontKey}{FontSize}{FontAttributes}{TargetType}Style&lt;/p&gt;

&lt;p&gt;It may be the case you need external fonts, so you can define such this way, using it as a font family:&lt;/p&gt;

&lt;p&gt;```xaml
&lt;OnPlatform 
    x:Key="LatoRegular"
    x:TypeArguments="x:String"
    Android="Lato-Regular.ttf#Lato"
    iOS="Lato-Regular" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;Style 
    x:Key="LatoRegular12RegularLabelStyle"
    TargetType="Label"&gt;
    &lt;Setter 
        Property="FontSize" 
        Value="12" /&gt;
&lt;/Style&gt;
```&lt;/p&gt;

&lt;p&gt;Notice how this one depends on its regular flavour, through inheritance —we don't want to rewrite stuff:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;xaml
&amp;lt;Style
    x:Key="LatoRegular12BoldLabelStyle"
    TargetType="Label"
    BasedOn="{StaticResource LatoRegular12RegularLabelStyle}"&amp;gt;
    &amp;lt;Setter
        Property="FontAttributes"
        Value="Bold" /&amp;gt;
&amp;lt;/Style&amp;gt;
&lt;/code&gt;&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <pubDate>Thu, 08 Nov 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Xamarin.Forms XAML: Converters</title>
  <guid>https://marcoscobena.com/?i=xf-xaml-converters</guid>
  <description>&lt;h3&gt;Converters.xaml&lt;/h3&gt;

&lt;p&gt;I think it's no new for anyone. If a particular converter's used only on a single XAML, just define it there. However, for those in more than one, having them here will help you adding new ones.&lt;/p&gt;

&lt;p&gt;Conventions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Key: &lt;code&gt;nameof(YourActualConverter).Replace("Converter", string.Empty)&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The reason why "Converter" is ripped from the key comes from better readability when using them in XAML: it just feels nicer things like —the word already appears a few times:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;IsEnabled="{Binding ImagePath, Converter={StaticResource StringEmptyToBool}, ConverterParameter=inverse}"&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​    I think will keep here all those I reuse from project to project:    &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;converters:&lt;/code&gt;&lt;a href="https://github.com/MarcosCobena/XamarinCrumbs/blob/master/XamarinCrumbs/XamarinForms/Converters/AnyConverter.cs"&gt;AnyConverter&lt;/a&gt;&lt;code&gt;x:Key="Any" /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;converters:&lt;/code&gt;&lt;a href="https://github.com/MarcosCobena/XamarinCrumbs/blob/master/XamarinCrumbs/XamarinForms/Converters/AreEqualsConverter.cs"&gt;AreEqualsConverter&lt;/a&gt;&lt;code&gt;x:Key="AreEquals" /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;converters:&lt;/code&gt;&lt;a href="https://github.com/MarcosCobena/XamarinCrumbs/blob/master/XamarinCrumbs/XamarinForms/Converters/IsStringNullOrWhiteSpaceConverter.cs"&gt;IsStringNullOrWhiteSpaceConverter&lt;/a&gt;&lt;code&gt;x:Key="IsStringNullOrWhiteSpace" /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;converters:&lt;/code&gt;&lt;a href="https://github.com/MarcosCobena/XamarinCrumbs/blob/master/XamarinCrumbs/XamarinForms/Converters/NotConverter.cs"&gt;NotConverter&lt;/a&gt;&lt;code&gt;x:Key="Not" /&amp;gt;&lt;/code&gt;&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <pubDate>Tue, 30 Oct 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Xamarin.Forms XAML: Control Templates</title>
  <guid>https://marcoscobena.com/?i=xf-xaml-control-templates</guid>
  <description>&lt;h3&gt;ControlTemplates.xaml&lt;/h3&gt;

&lt;p&gt;&lt;img src="items/images/pine-watt-412305-unsplash.jpg" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/photos/3_Xwxya43hE?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;pine  watt&lt;/a&gt; on &lt;a href="https://unsplash.com/search/photos/frame?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As it uses to happen, I learned what Control Templates were during a big refactoring involving styles. When you're going through the screens designed, don't you realize there's a common pattern? If you do, try to group all those things shared into Control Templates, because will frame your pages letting such concentrate just in the inner content.&lt;/p&gt;

&lt;p&gt;Conventions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Key: {Identifier}Template&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to consume them, just add those at page's definition:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;xaml
&amp;lt;ContentPage 
    [...]
    ControlTemplate="{StaticResource FullScreenLoadingTemplate}"&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This one's particularly handy, as can make any page loading-aware:&lt;/p&gt;

&lt;p&gt;```xaml
&lt;ControlTemplate x:Key="FullScreenLoadingTemplate"&gt;
    &lt;AbsoluteLayout&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;ContentPresenter
        AbsoluteLayout.LayoutFlags="All"
        AbsoluteLayout.LayoutBounds="0, 0, 1, 1"
        IsVisible="{TemplateBinding BindingContext.IsBusy, Converter={StaticResource NotConverter}}" /&amp;gt;

    &amp;lt;ContentView
        AbsoluteLayout.LayoutFlags="All"
        AbsoluteLayout.LayoutBounds="0, 0, 1, 1"
        IsVisible="{TemplateBinding BindingContext.IsBusy}"&amp;gt;

        &amp;lt;ActivityIndicator
            IsRunning="true"
            HorizontalOptions="Center"
            VerticalOptions="Center" /&amp;gt;

    &amp;lt;/ContentView&amp;gt;

&amp;lt;/AbsoluteLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/ControlTemplate&gt;
```&lt;/p&gt;

&lt;p&gt;Another scenario where I found these quite useful's pages with custom nav bars —i.e. you don't want predefined OS one. Instead of stacking once and again your "CustomNavBarControl" it can be done just once, worrying on the actual changing content.&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <pubDate>Wed, 17 Oct 2018 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Xamarin.Forms XAML: Colors</title>
  <guid>https://marcoscobena.com/?i=xf-xaml-colors</guid>
  <description>&lt;h3&gt;Colors.xaml&lt;/h3&gt;

&lt;p&gt;Every color's placed here: it's super convenient to have all together, it helps us identify repeated ones, for instance. We try to keep them order alphabetically, although it's not a must: simply helps some of us to quickly locate them —in C# we have a drop-down menu just on top of the editor to navigate between members, but currently, VS for Mac at least, doesn't have any similar.&lt;/p&gt;

&lt;p&gt;Conventions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Key: {Identifier}Color for &lt;code&gt;Color&lt;/code&gt; or {Identifier}ColorString for &lt;code&gt;string&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Value: lowercase hex format (you can opt for uppercase, but choosing one will keep consistency)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RGB most of the times, although ARGB works pretty well in scenarios where backgrounds are semitransparent, or gradients too&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;```xaml
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ResourceDictionary 
    xmlns="http://xamarin.com/schemas/2014/forms" 
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml" 
    x:Class="XamarinCrumbs.XamarinForms.Colors"&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Color x:Key="AccentColor"&amp;gt;#50e3c2&amp;lt;/Color&amp;gt;
&amp;lt;x:String x:Key="AccentColorString"&amp;gt;#50e3c2&amp;lt;/x:String&amp;gt;

&amp;lt;Color x:Key="DefaultTextColor"&amp;gt;#abb3c8&amp;lt;/Color&amp;gt;

&amp;lt;Color x:Key="SecondaryTextColor"&amp;gt;#868ea4&amp;lt;/Color&amp;gt;

&amp;lt;Color x:Key="WhiteColor"&amp;gt;#ffffff&amp;lt;/Color&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/ResourceDictionary&gt;
```&lt;/p&gt;

&lt;p&gt;You've probably asked your-self why WhiteColor's defined when there's already White in &lt;code&gt;Xamarin.Forms.Color&lt;/code&gt;: sometimes it's intelligent to "duplicate" them for supporting future tonality changes, f.e.&lt;/p&gt;

&lt;p&gt;Moreover, you've seen in above XAML there's the same color twice: it makes sense when you need to consume such for controls like &lt;a href="https://github.com/luberda-molinet/FFImageLoading"&gt;FFImageLoading&lt;/a&gt;'s, which don't accept a &lt;code&gt;Color&lt;/code&gt;, but a &lt;code&gt;string&lt;/code&gt; in hex format.&lt;/p&gt;

&lt;p&gt;Although I've personally prefered naming colors by their actual value (LightGreenColor, for example), I've ended up choosing those which give a hint on where they're applied: DefaultTextColor, SeparatorColor, things like these.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PS.&lt;/em&gt;: On 2017 I wrote this small thing, &lt;a href="?i=abanico-a-few-hours-with-xamarin-forms-and-skiasharp"&gt;Abanico&lt;/a&gt;, to understand how color wheels work. It's Xamarin.Forms too, with SkiaSharp:&lt;/p&gt;

&lt;p&gt;&lt;img src="items/images/jun-21-2017-22-47-38.gif" alt="" /&gt;&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <pubDate>Tue, 09 Oct 2018 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Xamarin.Forms XAML</title>
  <guid>https://marcoscobena.com/?i=xf-xaml</guid>
  <description>&lt;p&gt;In the same way we continuously refactor our C# code we should trait XAML one equally. As we layout screens there uses to be pieces which can be reused here and there. After some years working with Xamarin.Forms —plus some more with WPF and co.— I've learnt from others, and my own experience, how to scaffold good XAML which maintains its good shape as time goes by.&lt;/p&gt;

&lt;p&gt;Split into chapters, I'll try to cover everything expressed in XAML:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="?i=xf-xaml"&gt;"StyleCop" for XAML and App structure (this one)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="?i=xf-xaml-colors"&gt;Colors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="?i=xf-xaml-control-templates"&gt;Control Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="?i=xf-xaml-converters"&gt;Converters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="?i=xf-xaml-font-styles"&gt;Font Styles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Global Styles&lt;/li&gt;
&lt;li&gt;Sizes&lt;/li&gt;
&lt;li&gt;Styles&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;"StyleCop" for XAML&lt;/h3&gt;

&lt;p&gt;Nowdays, I don't know anything which checks styling in XAML files —haven't spent much time looking for to be honest. However, each one of us has a different way of writting XAML. Also, Visual Studio applies different formatting in Windows and macOS. For all this, it's not difficult to end up having a mix of styles when the project grows.&lt;/p&gt;

&lt;p&gt;XAML's a much easier language to define than C#, so are the rules I try to follow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;One attribute per line —we call this Merge-friendly XAML. The main reason's just that: merges are easier to handle when changes appear per line, instead of having to look which attribute/s were changed among a bunch;

&lt;ol&gt;
&lt;li&gt;As an exception to this rule we like to write &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Key&lt;/code&gt; ones in the same line where the control's defined&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;120 chars per line; it helps us work with multiple files openned as columns.&lt;/li&gt;
&lt;li&gt;Empty lines around controls' XML nodes: look below how &lt;code&gt;Label&lt;/code&gt; breezes inside the &lt;code&gt;ContentView&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This' an example following above rules:&lt;/p&gt;

&lt;p&gt;```xaml
&lt;ContentView
    VerticalOptions="Start"&gt;
    &lt;ContentView.Padding&gt;
        &lt;Thickness
            Top="{StaticResource DefaultMargin}"
            Right="{StaticResource DefaultMargin}"
            Bottom="{StaticResource DefaultMargin}"/&gt;
    &lt;/ContentView.Padding&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Label x:Name="theLabel"
    Text="{Binding Key}"
    Style="{StaticResource 20BoldFontStyle}"
    TextColor="{StaticResource WhiteColor}"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/ContentView&gt;
```&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update (4/10/2018):&lt;/strong&gt; Daniel Martín's recommended through &lt;a href="https://twitter.com/danimart1991/status/1047735254046453761"&gt;this tweet&lt;/a&gt; to have a look to &lt;a href="https://github.com/Xavalon/XamlStyler"&gt;XamlStyler&lt;/a&gt;: although it's focused on VS on Windows, they provide a CLI through NuGet which could fit under macOS.&lt;/p&gt;

&lt;h3&gt;App.xaml&lt;/h3&gt;

&lt;p&gt;At the opposite of what we'd think, I've found better with time to leave this file "empty". The quotes mean it's actually not empty, but blends other sources which do have XAML of value inside.&lt;/p&gt;

&lt;p&gt;This, for example, is a typical App.xaml:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;xaml
&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;
&amp;lt;Application 
    xmlns="http://xamarin.com/schemas/2014/forms"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:local="clr-namespace:XamarinCrumbs.XamarinForms"
    x:Class="XamarinCrumbs.XamarinForms.App"&amp;gt;
    &amp;lt;Application.Resources&amp;gt;
        &amp;lt;ResourceDictionary&amp;gt;
            &amp;lt;ResourceDictionary.MergedDictionaries&amp;gt;
                &amp;lt;local:Colors /&amp;gt;
                &amp;lt;local:ControlTemplates /&amp;gt;
                &amp;lt;local:Converters /&amp;gt;
                &amp;lt;local:FontStyles /&amp;gt;
                &amp;lt;local:GlobalStyles /&amp;gt;
                &amp;lt;local:Sizes /&amp;gt;
                &amp;lt;local:Styles /&amp;gt;
            &amp;lt;/ResourceDictionary.MergedDictionaries&amp;gt;
        &amp;lt;/ResourceDictionary&amp;gt;
    &amp;lt;/Application.Resources&amp;gt;
&amp;lt;/Application&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Whoever may open this file for the first time will quickly know how stuff's placed within the project.&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <pubDate>Thu, 04 Oct 2018 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Xamarin.Forms Design Framework</title>
  <guid>https://marcoscobena.com/?i=Xamarin-Forms-Design-Framework-b23a2f12cce5</guid>
  <description>&lt;p&gt;&lt;em&gt;(This post was imported, please &lt;a href="#/contact"&gt;contact&lt;/a&gt; me if there's anything wrong with it. Thanks in advance)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Xamarin.Forms Design Framework&lt;/h3&gt;

&lt;p&gt;In my personal trip to leverage all those small problems I found in my day to day, there’s one which sistematically reappears: I’m about to start a new Xamarin.Forms project for X platforms — please note the plural — but just have its design for one of them. For instance: I want my app to target Android &amp;amp; iOS, but just have the Android design.&lt;/p&gt;

&lt;p&gt;The reasons why this happen would give for a different thread but I feel them as an homogeneus mix of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Xamarin.Forms’ missunderstood, or we didn’t explain it quite well: it’s felt like Flutter — it appeared! — when it’s not&lt;/li&gt;
&lt;li&gt;We don’t want to increase the time and money by spending a few more days with the rest of designs, for one reason or another we don’t see its valueI’ve been thinking a lot on this and nowadays have a strong opinnion which proposes one possible exit:&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;strong&gt;Xamarin.Forms Design Framework&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Most of the times, when I’m working with a Zeplin project for a Forms app, the first servers as a handful guide of margins/paddings, sizes and colors. It’s not so much whether the status bar has a particular background color, or the button has any tweak which makes it look different. Obviously, those are things which in the end need to be done, but aren’t at the top of value.&lt;/p&gt;

&lt;p&gt;Imagine we had something like &lt;a href="http://design.xamarin.com"&gt;http://design.xamarin.com&lt;/a&gt; where our Designers could head on and learn without the first scroll what actually Xamarin.Forms’ all about. In their language.&lt;/p&gt;

&lt;p&gt;After this, it could propose a Design Framework which would isolate from platform specifics and would concentrate on letting Designers express our apps in an agnostic way. A quick example to explain this: a button in such Framework would be a flat box with text inside: as a Developer, I can gather its width &amp;amp; height, its relative position to the parent view, margins with close controls, padding with its internal title and even its font size &amp;amp; color, which could also be done latter by Platform Translators.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://cdn-images-1.medium.com/max/1000/0*t7UJdpwx2KGsTC1N" alt="" /&gt;&lt;br /&gt;
Photo by &lt;a href="https://unsplash.com/@halgatewood?utm_source=medium&amp;amp;utm_medium=referral"&gt;Hal Gatewood&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;br /&gt;
Platform Translators are the pieces which our Designer could fulfill to tell us how buttons should look like in iOS, in a closer aspect, or which’s the predominant font family to use in Android.&lt;/p&gt;

&lt;p&gt;Such Design Framework could be seen as an imaginary device which focuses on wireframing, and then could have it’s Forms backend, letting us express the UIs internally with XAML.&lt;/p&gt;

&lt;p&gt;Even more, all this also sets the scenario up for something like a WYSIWYG editor, where XAML brights, now yes, serving as a bridge where Designers and Developers can interact. XAML was conceived with this in mind more than a decade ago but the reality is it’s heavily focused on just Developers. Let’s change this.&lt;/p&gt;

&lt;p&gt;Designers could have templates for Sketch or PhotoShop where every control is just there to drag &amp;amp; drop into their designs, in the same way there are toolkits for the most known platforms.&lt;/p&gt;

&lt;p&gt;The truth’s we are moving into an ecosystem where our apps can be mobile or desktop or cloud, but such can’t only rely in the Development side. If we don’t make our Designers happier — with its direct impact on the later development — we’ll keep having a very beatiful app on X, with a “free” version on Y and Z.&lt;/p&gt;

&lt;p&gt;And the best: there’s nothing to change on Forms. There’s nothing dependant on development tools, or SDKs. Sketching’s nothing new. It’s more of a mind change.&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <pubDate>Sun, 10 Jun 2018 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Fri 6: Sum up &amp;amp; fuget.org</title>
  <guid>https://marcoscobena.com/?i=Fri-6--Sum-up---fuget-org-defecbf27385</guid>
  <description>&lt;p&gt;&lt;em&gt;(This post was imported, please &lt;a href="#/contact"&gt;contact&lt;/a&gt; me if there's anything wrong with it. Thanks in advance)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Fri 6: Sum up &amp;amp; fuget.org&lt;/h3&gt;

&lt;p&gt;The end of the week’s here and summing up what have worked on these days, most of time’s been reading other’s source code. Years ago I may have received this task as OK… I’ll do it; nowadays, I see it as a great opportunity to learn how others do the same I daily do.&lt;/p&gt;

&lt;p&gt;My mate Javi Suárez’s just introduced me the latest Frank Krueger’s joy: &lt;a href="http://www.fuget.org"&gt;fuget.org&lt;/a&gt;. It’s immediately came to my mind the idea of picking just those portions of NuGet packages you’re actually interested on and go ahead.&lt;/p&gt;

&lt;p&gt;I’ve multiple times had the idea of something simpler than NuGet, but more complex than pasting classes here and there —and stronger by the way. Something similar to JavaScript’s NPM, but maybe having code in IL —have to work the idea out a little bit.&lt;/p&gt;

&lt;p&gt;(Take into account I wrote this while listening to this “Peaceful Meditation” list at Spotify: )&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <pubDate>Thu, 05 Apr 2018 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Thu 5: Analysing an app written by others</title>
  <guid>https://marcoscobena.com/?i=Thu-5--Analysing-an-app-written-by-others-ab9c50246d5a</guid>
  <description>&lt;p&gt;&lt;em&gt;(This post was imported, please &lt;a href="#/contact"&gt;contact&lt;/a&gt; me if there's anything wrong with it. Thanks in advance)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Thu 5: Analysing an app written by others&lt;/h3&gt;

&lt;p&gt;From Wednesday to Friday I’ll be working on an analysis of a Xamarin.Forms app to detect those places where performance can be gained and which actions can be performed to mitigate such. It’s a production app which serve as the entry point to an entire business, thus awesome to have the chance to work on this.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://cdn-images-1.medium.com/max/800/0*vbffrCWTz924jPae." alt="" /&gt;&lt;br /&gt;
Photo by &lt;a href="https://unsplash.com/@jilburr?utm_source=medium&amp;amp;utm_medium=referral"&gt;Jilbert Ebrahimi&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;It came up to my mind a talk Federico Mena spent a few years ago —maybe more than a few— on how to start developing software: read what others write. Although I won’t be actually writing within these days am learning different ways of doing things, and really cool ones.&lt;/p&gt;

&lt;p&gt;In the other side, it’s curious how we all have similar issues, which in the end are even more important and low level, such us deciding whether navigation happens just after tapping and the destiny loads on the demand, or first load everything and then navigates.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Oh, and one great productivity tip! I’ve finally discovered how can hide macOS’ badges —I was actually interested in hiding Outlook’s unread messages one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://apple.stackexchange.com/questions/163490/quickly-remove-badge-from-app"&gt;&lt;strong&gt;Quickly remove badge from app&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;Is it possible to quickly remove a notification badge from an app in the Dock? I'm looking for a solution faster than…&lt;/em&gt;apple.stackexchange.com&lt;/a&gt;&lt;a href="https://apple.stackexchange.com/questions/163490/quickly-remove-badge-from-app"&gt;&lt;/a&gt;&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <pubDate>Wed, 04 Apr 2018 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Wed 4: Meetings</title>
  <guid>https://marcoscobena.com/?i=Wed-4--Meetings-2556117737e8</guid>
  <description>&lt;p&gt;&lt;em&gt;(This post was imported, please &lt;a href="#/contact"&gt;contact&lt;/a&gt; me if there's anything wrong with it. Thanks in advance)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Wed 4: Meetings&lt;/h3&gt;

&lt;p&gt;I’ve spent almost the entire day with meetings.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://cdn-images-1.medium.com/max/800/0*Ce9giJMX6AhHyiLo." alt="" /&gt;&lt;br /&gt;
Photo by &lt;a href="https://unsplash.com/@dylandgillis?utm_source=medium&amp;amp;utm_medium=referral"&gt;Dylan Gillis&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;In the morning the app review, where learnt [again] such interactions need to happen more often: not every customer has the same needs, although we’re all humans in the end and communication’s the best tool in earth to round corners.&lt;/p&gt;

&lt;p&gt;In the afternoon, had the same on Wave Engine, where I didn’t finish the GTK# component to CRUD animation curves —similar to the one Unity bundles with the editor. This month Sergio and I’ll finish such, and work to remove Stetic files since the rename to VS for Mac Xamarin Studio’s no longer available for Windows thus Stetic visual editor goes the same.&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <pubDate>Tue, 03 Apr 2018 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Tue 3: Multiple instances of the same ViewModel</title>
  <guid>https://marcoscobena.com/?i=Tue-3--Multiple-instances-of-the-same-ViewModel-5e696e8dd793</guid>
  <description>&lt;p&gt;&lt;em&gt;(This post was imported, please &lt;a href="#/contact"&gt;contact&lt;/a&gt; me if there's anything wrong with it. Thanks in advance)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Tue 3: Multiple instances of the same ViewModel&lt;/h3&gt;

&lt;p&gt;I have another issue of multiple instances of the same ViewModel live at the same time. Basically am navigating to the same page —after having some others in the middle— through 1) InsertPageBefore() and 2) PopToRoot().&lt;/p&gt;

&lt;p&gt;&lt;img src="https://cdn-images-1.medium.com/max/800/0*atYJhzXMB636j8nr." alt="" /&gt;&lt;br /&gt;
Photo by &lt;a href="https://unsplash.com/@creativeexchange?utm_source=medium&amp;amp;utm_medium=referral"&gt;The Creative Exchange&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;Xamarin Profiler’s always helped me sort those things out, and turns out haven’t used it lately, and after taking some snapshots I see the instances decrease to just 1. However, remember those snapshots force a GC’s collect, and &lt;a href="https://forums.xamarin.com/discussion/comment/322352/#Comment_322352"&gt;that way it’s&lt;/a&gt;. So, it turns out this’ a wonderful fast way to detect whether your VM’s actually referenced.&lt;/p&gt;

&lt;p&gt;Wasn’t there a way to see the back references for a given instance? My main concern isn’t having multiple instances live (which too), but the multiple navigations happening because of same code being executed on those places.&lt;/p&gt;

&lt;p&gt;Such VM’s a more elaborated flavor of this one —with a cancellation token to “assure” the loop is endless:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/MarcosCobena/XamarinFormsVisualStates/blob/master/XamarinFormsVisualStates/NFCViewModel.cs"&gt;&lt;strong&gt;MarcosCobena/XamarinFormsVisualStates&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;XamarinFormsVisualStates - Another approach to Visual States in Xamarin.Forms&lt;/em&gt;github.com&lt;/a&gt;&lt;a href="https://github.com/MarcosCobena/XamarinFormsVisualStates/blob/master/XamarinFormsVisualStates/NFCViewModel.cs"&gt;&lt;/a&gt;&lt;br /&gt;
Surely, the cancellation isn’t happening…&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <pubDate>Mon, 02 Apr 2018 22:00:00 GMT</pubDate>
</item></channel>
</rss>