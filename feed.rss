<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel><title>Marcos Cobeña Morián</title>
<description>I write apps for people using Xamarin</description>
<link>https://marcoscobena.com</link>
<item>
  <title>SQLite &amp; Material Design Frames on iOS</title>
  <guid>https://marcoscobena.com/#/2018-2-27</guid>
  <description>&lt;p&gt;Today I’ve needed to debug how our DB is physically created —tables and PKs— and
Pulido (thanks man!) told me to enable tracing so every query gets printed (we
found it
&lt;a href="http://igrali.com/2015/03/12/output-sqlite-queries-using-sqlite-net-in-universal-apps/"&gt;here&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;connection = new SQLiteAsyncConnection(DatabasePath) { Trace = true };&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Our app uses Material Design card views here and there, and we already have a
custom &lt;code&gt;Frame&lt;/code&gt; which disables shadows on iOS because of default ones are quite
dark and wide. Between
&lt;a href="https://alexdunn.org/2017/05/01/xamarin-tips-making-your-ios-frame-shadows-more-material/"&gt;this&lt;/a&gt;
Alex Dunn’s article,
&lt;a href="https://medium.com/material-design-for-ios/part-1-elevation-e48ff795c693"&gt;this&lt;/a&gt;
other one on moving elevation to iOS and
&lt;a href="https://stackoverflow.com/questions/9761189/whats-the-best-way-to-add-a-drop-shadow-to-my-uiview"&gt;this&lt;/a&gt;
last one on applying shadows to &lt;code&gt;UIView&lt;/code&gt; we got almost identical shadows on both
platforms. Yeah!&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Wed, 28 Feb 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>xUnit &amp; SQLite</title>
  <guid>https://marcoscobena.com/#/2018-2-26</guid>
  <description>&lt;p&gt;On past Friday I found a bug in the screen was working related to how things are
stored in the DB —SQLite, actually. My mates had already done an Unit Testing
project, powered by xUnit, so have gone in and added a test which reproduces my
issue.&lt;/p&gt;

&lt;p&gt;To be honest, I come from NUnit. Doing pair programming with a new workmate who
have joined the company today, we found out &lt;a href="https://xunit.github.io/docs/comparisons.html"&gt;this comparison
table&lt;/a&gt; which answered to my
scaffolding questions —and I’ve liked a lot how xUnit makes things simpler, i.e.
using &lt;code&gt;IDisposable.Dispose()&lt;/code&gt; for the tear down.&lt;/p&gt;

&lt;p&gt;Talking about the disposing, we want the DB to be reset prior to any test run,
and initially dropped the DB file with &lt;code&gt;System.IO.File&lt;/code&gt; helpers. Obviously this
went into a race condition where SQLite throws some read-only exceptions and
&lt;a href="https://github.com/oysteinkrog/SQLite.Net-PCL/issues/264"&gt;this thread&lt;/a&gt; helped
us to solve it —a simple “VACUUM” and done.&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Mon, 26 Feb 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Tools</title>
  <guid>https://marcoscobena.com/#/tools</guid>
  <description>&lt;p&gt;Those I use to work with in my daily job, mostly while developing apps:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Android File Transfer&lt;/strong&gt; —self-explanatory&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.android.com/filetransfer/"&gt;https://www.android.com/filetransfer/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BetterSnapTools&lt;/strong&gt; —I like a lot how Windows adapts such when taken into edges
and this makes exactly the same on macOS. Worth the price&lt;/p&gt;

&lt;p&gt;&lt;a href="https://itunes.apple.com/es/app/bettersnaptool/id417375580?mt=12"&gt;https://itunes.apple.com/es/app/bettersnaptool/id417375580?mt=12&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;🆕 ColorSlurp&lt;/strong&gt; —&lt;code&gt;CMD&lt;/code&gt; + &lt;code&gt;MAY&lt;/code&gt; + &lt;code&gt;M&lt;/code&gt; and you’ll get a small magnifier which
tells the color in hex format. Not only it’s handy for such, but also for
aligning things close in pixels&lt;/p&gt;

&lt;p&gt;&lt;a href="https://itunes.apple.com/es/app/colorslurp/id1287239339?mt=12"&gt;https://itunes.apple.com/es/app/colorslurp/id1287239339?mt=12&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Device Metrics&lt;/strong&gt; —idem as (1)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://material.io/devices/"&gt;https://material.io/devices/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disk Inventory X&lt;/strong&gt; —app to show a tree map with directories size, very handy
for debugging where the hell an app is taking so much space in disk&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.derlien.com/"&gt;http://www.derlien.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DPI love (1)&lt;/strong&gt; —which DPI a specific device has&lt;/p&gt;

&lt;p&gt;&lt;a href="http://dpi.lv/"&gt;http://dpi.lv/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GIF speed changer&lt;/strong&gt; —when Designers send me GIFs to showcase what they’re
pretending I find really useful to decrease motion to perceive small details&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ezgif.com/speed/"&gt;https://ezgif.com/speed/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;gimp-android-xdpi&lt;/strong&gt; —plug-in to export current image into multiple Android
densities (Target DP Width is that which will have in mdpi) &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ncornette/gimp-android-xdpi"&gt;https://github.com/ncornette/gimp-android-xdpi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;NOTE: in macOS, place the plug-in under &lt;code&gt;/Users/marcos/Library/Application
Support/GIMP/2.8/modules&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;🆕 Lorem Pixel&lt;/strong&gt; —returns random images categorized through topics and sizes.
Quite useful when outlining UIs which have images. My fuchsia &lt;code&gt;BoxView&lt;/code&gt;
replacement&lt;/p&gt;

&lt;p&gt;&lt;a href="http://lorempixel.com/"&gt;http://lorempixel.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vysor&lt;/strong&gt; —the best way I know to work as with an emulator but on an actual
Android device, worth purchasing&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.vysor.io/"&gt;https://www.vysor.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;Visual Studio for Mac&lt;/h3&gt;

&lt;p&gt;If not said explicitly these are available through existing repositories at
Visual Studio &gt; Extensions… &gt; Gallery.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MS Solution Launcher&lt;/strong&gt; —multiple instances of Visual Studio at the same time&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Redth/MSSolutionLauncher"&gt;https://github.com/Redth/MSSolutionLauncher&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redth’s Addins (IDE extensions)&lt;/strong&gt; —I can’t imagine VS withouth the Obliterate
output paths menu option: removes every bin/obj folder&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Sun, 25 Feb 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>FFImageLoading's SVGCachedImage &amp; converters chaining</title>
  <guid>https://marcoscobena.com/#/2018-2-22</guid>
  <description>&lt;p&gt;After enjoying so much crafting a screen, today I’ve worked on the small details
and continued with bindings.&lt;/p&gt;

&lt;p&gt;We have SVGs everywhere, and tint those on demand. I’ve wanted to style some to
avoid duplicate XAML here and there but this specifically doesn’t seem to work
with FFImageLoading’s &lt;code&gt;SvgCachedImage&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;    &lt;Style x:Key="24By24BlueSvgImageStyle" TargetType="svg:SvgCachedImage"&gt;  
        &lt;Setter Property="HeightRequest" Value="24" /&gt;  
        &lt;Setter Property="WidthRequest" Value="24" /&gt;  
        &lt;Setter Property="Transformations"&gt;  
            &lt;Setter.Value&gt;  
                &lt;collection:List x:TypeArguments="{x:Type svgwork:ITransformation}"&gt;  
                    &lt;transformations:TintTransformation  
                        HexColor="{StaticResource HexLightBlueColor}"  
                        EnableSolidColor="true" /&gt;  
                &lt;/collection:List&gt;  
            &lt;/Setter.Value&gt;  
        &lt;/Setter&gt;  
    &lt;/Style&gt;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;(This exact approach happened after trying the simplest ones, like having the
&lt;code&gt;TintTransformation&lt;/code&gt; directly as child of the &lt;code&gt;Setter&lt;/code&gt;’s &lt;code&gt;Value&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;I think this’ a bug on such control, so will fill it just in case.&lt;/p&gt;

&lt;p&gt;Finally, I’ve found a solution for converters chaining, where I needed a
&lt;code&gt;!Any(list)&lt;/code&gt; operation:&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;    &lt;converters:ValueConverterGroup x:Key="NotAnyConverter"&gt;  
        &lt;converters:AnyConverter /&gt;  
        &lt;converters:InverseBoolConverter /&gt;  
    &lt;/converters:ValueConverterGroup&gt;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;Above magic comes from
&lt;a href="https://gist.github.com/QiMata/b674d8b5a9e8a65910c9"&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Thu, 22 Feb 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Git-LFS &amp; CarouselView &amp; Xamarin.Forms Chrome's shortcut</title>
  <guid>https://marcoscobena.com/#/2018-2-21</guid>
  <description>&lt;p&gt;Today I’ve started to help in a new project where Design is quite strict —which
I like 🤘&lt;/p&gt;

&lt;p&gt;Cloning the repo, it’s set up with Git-LFS and I moved to SSH keys a month ago
or so. However, &lt;a href="https://github.com/git-lfs/git-lfs/issues/2186"&gt;LFS only works through
HTTPS&lt;/a&gt; so back to alternate
credentials. All of this within Visual Studio Team Services.&lt;/p&gt;

&lt;p&gt;The screen am working on starts with a carousel —a carousel!— and
&lt;a href="https://github.com/alexrainman/CarouselView"&gt;CarouselView&lt;/a&gt; fits perfectly. I’ve
only missed properties to customize its page selectors’ margin, but it’s not so
so important.&lt;/p&gt;

&lt;p&gt;What I can’t believe is how the hell have lived without this Chrome shortcut
—guess can be replicated in any other browser too:&lt;/p&gt;

&lt;p&gt;&lt;img src="items/images/XamarinFormsChromeSearch.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Instead of typing once and again “xamarin.forms “ and whatever now simply “xf” +
TAB and whatever. I’m so proud of this 🤠&lt;/p&gt;

&lt;p&gt;Finally, I’ve tried &lt;code&gt;RelativeLayout&lt;/code&gt; once again buuut keep thinking’s somewhat
useless when things can grow up hor. or ver. (i.e. a &lt;code&gt;Label&lt;/code&gt; with +1 line). Know
could do it by code, but after using LiveXAML’s difficult to switch back 🤷‍♂️&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Wed, 21 Feb 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>SVGs in Xamarin.Forms &amp; Git's cherry picking</title>
  <guid>https://marcoscobena.com/#/2018-2-20</guid>
  <description>&lt;p&gt;It may sound strange but today’s been my welcome into using SVGs in
Xamarin.Forms, and FFImageLoading’s helped a lot —have some mates here which are
already heavily using it.&lt;/p&gt;

&lt;p&gt;If you’re in the same position as me, read
&lt;a href="https://github.com/luberda-molinet/FFImageLoading/wiki/SVG-support"&gt;this&lt;/a&gt;
before going on, as needs some setup. I experienced the same issue as &lt;a href="https://github.com/luberda-molinet/FFImageLoading/issues/914"&gt;this
user&lt;/a&gt; but ended up
sorting it out —read my comment at bottom.&lt;/p&gt;

&lt;p&gt;Honestly, I think will try to, from today, add every asset as SVG since Zeplin,
for instance, supports that export option, and you avoid messing with Android’s
densities, iOS' &lt;code&gt;@Nx&lt;/code&gt;, etc.; giving our users the best result in their screens.&lt;/p&gt;

&lt;p&gt;The only thing which worries me’s that FFImageLoading depends on SkiaSharp for
drawing SVGs, and read some months ago each time you work with a Skia’s canvas
the amount of memory reserved corresponds to a bitmap of screen size. But
probably FFImageLoading already handles this.&lt;/p&gt;

&lt;p&gt;In other aspects, at the end of the day committed my changes, and pushed them,
buuut discovered a bug I introduced with a few files changed. After reverting
that commit for two (2) times, discovered you can cherry-pick a commit and don’t
commit it back again, but leave it at staging, so you simply can reset here and
there:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git cherry-pick -n PROBLEMATIC_COMMIT_HASH&lt;/code&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Tue, 20 Feb 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Connecting your app with an ASP.NET API running on a local VM</title>
  <guid>https://marcoscobena.com/#/2018-2-19</guid>
  <description>&lt;p&gt;My current project involves an ASP.NET server side with both a small web and its
API. I needed to debug things locally to go faster, thus wanted to connect my
app in macOS to the API in my virtualized Windows 10. In order to access such
endpoint
&lt;a href="https://stackoverflow.com/questions/35247847/bad-request-invalid-hostname-asp-net-visual-studio-2015/41895739"&gt;this&lt;/a&gt;
article helped quite a lot.&lt;/p&gt;

&lt;p&gt;Just would like to highlight some small details, which made me got it working:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The applicationhost.config file isn’t the one located under &lt;code&gt;Program
Files\Blablabla&lt;/code&gt;, but inside the solution root: for instance,
&lt;code&gt;C:\Users\Marcos\Repositorios\MyProject\src\.vs\config&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The correct binding which worked for me is as follows:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;site name="..." id="2"&amp;gt;
    &amp;lt;application path="/" applicationPool="Clr4IntegratedAppPool"&amp;gt;
        &amp;lt;virtualDirectory path="/" physicalPath="C:\Users\Marcos\Repositorios\MyProject\src\MyProjectServer\MyProjectApi" /&amp;gt;
    &amp;lt;/application&amp;gt;
    &amp;lt;bindings&amp;gt;
        &amp;lt;binding protocol="http" bindingInformation="*:53034:localhost" /&amp;gt;
        &amp;lt;!-- This one! --&amp;gt;
        &amp;lt;binding protocol="http" bindingInformation="10.4.1.51:53034:*" /&amp;gt;
    &amp;lt;/bindings&amp;gt;
&amp;lt;/site&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;ol start="3"&gt;
&lt;li&gt;&lt;p&gt;If you want to connect to the attached SQL Server DB —as for connecting with
Management Studio:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;this command tells which instance I have in my machine:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;C:\Program Files\Microsoft SQL Server\130\Tools\Binn&amp;gt;SqlLocalDB.exe
info&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;and this whether my instance is on or off:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;C:\Program Files\Microsoft SQL Server\130\Tools\Binn&amp;gt;SqlLocalDB.exe
info MSSQLLocalDB&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, Stephane Delcroix replied to my post at Planet Xamarin’s Twitter
account with a &lt;a href="https://github.com/xamarin/Xamarin.Forms/pull/1317"&gt;PR&lt;/a&gt;, already
merged, where he adds ValueTuples support to Xamarin.Forms! Thanks Stephane 😇&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Mon, 19 Feb 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Falling in love with ValueTuples and a small heart break</title>
  <guid>https://marcoscobena.com/#/2018-2-15</guid>
  <description>&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Having Valentine’s Day so close in date, today I’ve felt in love with
ValueTuples. Why you would say: because it allowed me to super super easy build
models to wire up with the UI, something like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;return new (Title: $”Action {index + 1}”, Exercise: currentExercise,
ValidatedSession: currentValidatedSession);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Already “old” Tuples were doing a great job for me, because even &lt;code&gt;Item1&lt;/code&gt;, etc.
was feeling ugly when binding in XAML, it still was allowing me go fast
iterating. But discovered that beautiful naming in ValueTuples and moved on.&lt;/p&gt;

&lt;p&gt;However, Xamarin.Forms’ XAML currently doesn’t support referencing a named
property from ValueTuples —I guess it comes from XAMLC phase. So had to finally
create some models and work with them from that on.&lt;/p&gt;

&lt;p&gt;My question is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Has anyone sorted out a way to make that work? And, do you see it as
    interesting as I do?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Oh, and &lt;a href="https://github.com/xamarin/Xamarin.Forms/issues/1891"&gt;found a bug&lt;/a&gt; with
DataTriggers which cannot reference an enum value.&lt;/p&gt;

&lt;p&gt;And another one, &lt;a href="https://bugzilla.xamarin.com/show_bug.cgi?id=59448"&gt;already
filled&lt;/a&gt;, where
&lt;code&gt;IsClippedToBounds&lt;/code&gt; doesn’t work with Fast Renderers.&lt;/p&gt;

&lt;p&gt;We could say it’s been a buggy day.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://media.giphy.com/media/oSUtmrhRz5te0/giphy.gif" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;(I could stay riveted with this GIF.)&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Thu, 15 Feb 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Suave scroll-less lists in Xamarin.Forms</title>
  <guid>https://marcoscobena.com/#/2018-2-13</guid>
  <description>&lt;p&gt;The screen am working on needs something like a &lt;code&gt;ListView&lt;/code&gt; inside a
&lt;code&gt;ScrollView&lt;/code&gt;, which’s nothing recommended —on a Xamarin.Android app had enabled
nesting before but I try to avoid going Custom Rendering from the beginning.
Other times have needed this ended up writing a converter which calculates
&lt;code&gt;amountOfItems * RowHeight&lt;/code&gt; to avoid any scrolling, but today wanted to dig a
little bit for a better approach.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://media.giphy.com/media/l41Ygr7sR5limRkek/giphy.gif" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And I’ve discovered
&lt;a href="https://github.com/SuavePirate/DynamicStackLayout"&gt;DynamicStackLayout&lt;/a&gt;, exactly
what was looking for. It’s as easy to use as removing the &lt;code&gt;ListView&lt;/code&gt; declaration
—and its attributes— for &lt;code&gt;DynamicStackLayout&lt;/code&gt;, and boom:&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;    &lt;suave:DynamicStackLayout
        ItemsSource="{Binding FakeData}"&gt;
        &lt;suave:DynamicStackLayout.ItemTemplate&gt;
            &lt;DataTemplate&gt;
                &lt;templates:ExerciseSummaryItemTemplate /&gt;
            &lt;/DataTemplate&gt;
        &lt;/suave:DynamicStackLayout.ItemTemplate&gt;
    &lt;/suave:DynamicStackLayout&gt;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;Thanks Alex Dunn, really nice thing 😊&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Tue, 13 Feb 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Rapid styling ListViews</title>
  <guid>https://marcoscobena.com/#/2018-2-12</guid>
  <description>&lt;p&gt;Today I’ve been working on a XAML page and, again, have needed some fake data to
populate a &lt;code&gt;ListView&lt;/code&gt;’s &lt;code&gt;ItemsSource&lt;/code&gt;. A trick I find so useful for that,
without building custom models which represent’s Design copies, is to simply
bind an array of n items:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;within your ViewModel — here for instance 3:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;public IEnumerable&amp;lt;int&amp;gt; FakeData =&amp;gt; Enumerable.Range(0, 3);&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;within your &lt;code&gt;Page&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;&amp;amp;lt;ListView ItemsSource="{Binding FakeData}" [...]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now I can concentrate on the item template without putting so much effort on the
temporal fake data.&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Mon, 12 Feb 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Embedding JSON responses conditionally</title>
  <guid>https://marcoscobena.com/#/2018-2-9</guid>
  <description>&lt;p&gt;&lt;a href="https://marcoscobena.com/#/2018-2-7"&gt;Using JSON files to replicate calls&lt;/a&gt; has a
downside: you can end up bundling those in the final package, increasing its
size and looking ugly. I had never done before embedding something
conditionally, but there was Stack Overflow with a
&lt;a href="https://stackoverflow.com/questions/14224316/embed-a-resource-conditionally-in-a-csproj"&gt;solution&lt;/a&gt;
for this:&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;&amp;lt;ItemGroup Condition="'$(Configuration)' == 'Debug’"&amp;gt;
    &amp;lt;EmbeddedResource Include="..\Files\Debug\FakeExercises.json"&amp;gt;
      &amp;lt;Link&gt;Services\Exercise\FakeExercises.json&amp;lt;/Link&amp;gt;
    &amp;lt;/EmbeddedResource&amp;gt;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;Just Debug compilations will move the file on, Release and so on will be cristal
clear.&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Sun, 11 Feb 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Thursday</title>
  <guid>https://marcoscobena.com/#/2018-2-8</guid>
  <description>&lt;p&gt;During Christmas I was working on a small game prototype, fully backed by the
joy I had going through Thimbleweed Park. Basically enabled a way to write down
state-based logic in a ViewModel, which informs the View on just a few messages
where this last only reacts. Everything powered by Tasks.&lt;/p&gt;

&lt;p&gt;Today I woke up thinking could do better with the screen am on currently, and
decided to implement that of above. I’m super lucky of being sat down ten steps
away from Dani Cáceres, the one I know in person who better manages Tasks in
depth.&lt;/p&gt;

&lt;p&gt;And asked him to review my code. And, obviously, had stuff to improve. The most
significant’s a corner case where a Task could be there forever, so he
introduced &lt;code&gt;CancellationToken.Register()&lt;/code&gt;: a straight way to dispose stuff when
the cancellation happens, and fit perfectly in my scenario.&lt;/p&gt;

&lt;p&gt;Thanks Dani! 🙂&lt;/p&gt;

&lt;p&gt;Back to the logic, my VM know exposes the following:&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;    public async Task StartStateMachineAsync()
    {
        if (&lt;em&gt;cancellationTokenSource != null &amp;amp;&amp;amp; !&lt;/em&gt;cancellationTokenSource.IsCancellationRequested)
        {
            return;
        }&lt;/p&gt;

&lt;p&gt;        _cancellationTokenSource = new CancellationTokenSource();
        var token = _cancellationTokenSource.Token;&lt;/p&gt;

&lt;p&gt;        while (!token.IsCancellationRequested)
        {
            MessagingCenter.Send(this, NFCUnavailableMessage);
            await Task.Delay(SecondsToHoldBetweenStates);&lt;/p&gt;

&lt;p&gt;            var isNFCSupported = CheckNFCSupport();&lt;/p&gt;

&lt;p&gt;            if (isNFCSupported)
            {
                await PoolForNFCAvailableAsync();
            }
            else
            {
                continue;
            }&lt;/p&gt;

&lt;p&gt;            MessagingCenter.Send(this, ReadyToReadMessage);
            await Task.Delay(SecondsToHoldBetweenStates);&lt;/p&gt;

&lt;p&gt;            var nfcTagId = await TagDetectedAsync(_cancellationTokenSource.Token);&lt;/p&gt;

&lt;p&gt;            MessagingCenter.Send(this, ReadSuccessfulMessage);
            await Task.Delay(SecondsToHoldBetweenStates);&lt;/p&gt;

&lt;p&gt;            await TryNavigatingToMatchingControlAsync(nfcTagId);
        }
    }&lt;/p&gt;

&lt;p&gt;    public void StopStateMachine()
    {
        _cancellationTokenSource.Cancel();
    }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;(Yes, it’s all about handling NFC detection triggering some anims. in UI.)&lt;/p&gt;

&lt;p&gt;Every piece of logic in on the VM. &lt;em&gt;Every&lt;/em&gt;. This’ the View:&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;    protected override void OnAppearing()
    {
        base.OnAppearing();&lt;/p&gt;

&lt;p&gt;        SubscribeMessages();
        ViewModel.StartStateMachineAsync().ConfigureAwait(false);
    }&lt;/p&gt;

&lt;p&gt;    protected override void OnDisappearing()
    {
        base.OnDisappearing();&lt;/p&gt;

&lt;p&gt;        if (!_isAndroidMainActivityPausedBecauseOfNFCDetection)
        {
            UnsubscribeMessages();
            ViewModel.StopStateMachine();
            ResetImagesToTheirInitialState();
        }
    }&lt;/p&gt;

&lt;p&gt;    private void ResetImagesToTheirInitialState()
    {
        nfcUnavailableImage.Opacity = 0.12f;
        nfcReadyImage.Opacity = 0;
        nfcJustNFCImage.Opacity = 0;
        nfcJustOKImage.Opacity = 0;
    }&lt;/p&gt;

&lt;p&gt;    private void SubscribeMessages()
    {
        MessagingCenter.Subscribe&lt;NFCViewModel&gt;(this, NFCViewModel.NFCUnavailableMessage,
                                                async _ =&gt;
        {
            await nfcReadyImage.FadeTo(0);
            nfcJustNFCImage.Scale = 1;
            nfcJustOKImage.Scale = 0;
        });
        [...]
    }
    
    private void UnsubscribeMessages()
    {
        MessagingCenter.Unsubscribe&lt;NFCViewModel&gt;(this, NFCViewModel.NFCUnavailableMessage);
        [...]
    }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;That’s all. Probably this’ so obvious for you, or discover loads of downsides.
Whatever it comes to your mind, please share it. For me it’s like got something
really interesting to supply with MVVM, but it’s “my son”.&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Thu, 08 Feb 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Wednesday</title>
  <guid>https://marcoscobena.com/#/2018-2-7</guid>
  <description>&lt;p&gt;I’ve been working on a screen playing with NFC discoveral, and have used for the
very first time NFCForms plug-in. It’s nice because avoids all the boilerplate
code needed to setup NFC, and gives back a few events to notice when tags are
coming in.&lt;/p&gt;

&lt;p&gt;Such returns ids in a &lt;code&gt;byte[]&lt;/code&gt; forms, where each position represents 2 hex.
chars. How to covert it to a more convenient string?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var​ nfcTag = BitConverter.ToString(bytes).Replace("-", string.Empty);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I learnt that from &lt;a href="https://stackoverflow.com/questions/623104/byte-to-hex-string"&gt;this
thread&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since we consume a REST API and wanted to make some tests with a wrist-band we
have here at the office, my mate Sergio pointed me to capture the JSON payloads,
save it within the project and reproduce calls with a fake service, where &lt;a href="https://stackoverflow.com/a/34356170"&gt;this
method&lt;/a&gt; is sooo handy for reading from
embedded resources.&lt;/p&gt;

&lt;p&gt;Maybe this’ so simple but have read a little bit on how this op. works:&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (items?.FirstOrDefault() == null)
{ […] }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;The operator &lt;code&gt;?.&lt;/code&gt; —inside
&lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-conditional-operators"&gt;null-conditional&lt;/a&gt;
set— returns the right side of the expression if left isn’t &lt;code&gt;null&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;
otherwise, so the chain with &lt;code&gt;==&lt;/code&gt; fits perfect in this case.&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Wed, 07 Feb 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Tuesday</title>
  <guid>https://marcoscobena.com/#/2018-2-6</guid>
  <description>&lt;p&gt;I’m back to Plain Concepts, and have joined a beautiful Xamarin.Forms project.&lt;/p&gt;

&lt;p&gt;Asking the Designer for some info on a screen discovered how to capture a
screenshot and copy it directly into the clipboard in macOS:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt; + &lt;code&gt;CTRL&lt;/code&gt; + &lt;code&gt;MAY&lt;/code&gt; + &lt;code&gt;4&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Very funny to press with a single hand.&lt;/p&gt;

&lt;p&gt;Those assets was asking for needed a small tweak to turn one color into another
one, in order to compose an animation, and GIMP’s been there to the rescue
again:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.gimp.org/en/plug-in-exchange.html"&gt;https://docs.gimp.org/en/plug-in-exchange.html&lt;/a&gt;&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <pubDate>Tue, 06 Feb 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Tuesday</title>
  <guid>https://marcoscobena.com/#/2018-1-30</guid>
  <description>&lt;p&gt;Finally my mate Marcos Antonio and I —yep, both Marcos— ‘ve found out the root
for this issue:&lt;/p&gt;

&lt;p&gt;```
Jan 30 13:24:02 iPhone-de-Marcos AnAwesomeApp.iOS[320] &lt;Notice&gt;: 
Unhandled Exception:
System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---&gt; System.TypeInitializationException: The type initializer for 'AnAwesomeApp.Views.Controls.CollectionWrapLayoutView' threw an exception. ---&gt; System.TypeInitializationException: The type initializer for 'ReactiveUI.RxApp' threw an exception. ---&gt; System.TypeInitializationException: The type initializer for 'System.Reactive.Concurrency.TaskPoolScheduler' threw an exception. ---&gt; System.TypeInitializationException: The type initializer for 'System.Reactive.Concurrency.ConcurrencyAbstractionLayer' threw an exception. ---&gt; System.TypeInitializationException: The type initializer for 'System.Reactive.Concurrency.NewThreadScheduler' threw an exception. ---&gt; System.NullReferenceException: Object reference not set to an instance of an object
  at System.Reactive.PlatformServices.SystemClock.Register (System.Reactive.Concurrency.LocalScheduler scheduler) &amp;lt;0x103959fa0 + 0x00174&gt; in &amp;lt;&amp;lt;\M-b\M^@\M-&amp;amp;&gt;
Jan 30 13:24:02 iPhone-de-Marcos AnAwesomeApp.iOS[320] &lt;Notice&gt;: Unhandled managed exception:
Exception has been thrown by the target of an invocation. (System.Reflection.TargetInvocationException)
  at System.Reflection.MonoCMethod.InternalInvoke (System.Object obj, System.Object[] parameters) &amp;lt;0x100c4b000 + 0x0006c&gt; in &lt;d680a8bf3a2a4c8dbbfde665ba81f6f2#008dcf0648eed9dfc59fadc50c407e2c&gt;:0 
  at System.RuntimeType.CreateInstanceMono (System.Boolean nonPublic) &amp;lt;0x100ba1040 + 0x0011b&gt; in &lt;d680a8bf3a2a4c8dbbfde665ba81f6f2#008dcf0648eed9dfc59fadc50c407e2c&gt;:0 
  at System.RuntimeType.CreateInstanceSlow (System.Boolean publicOnly, System.Boolean skipCheckThis, System.Boolean fillCache, System.Threading.StackCrawlMark&amp;amp; stackMark) &amp;lt;0x100ba0ff0 + 0x0003f&gt; in &lt;d680a8bf3a2a4c8dbbfde665ba81f6f2#008dcf0648eed9dfc59fadc50c407e2c&gt;:0 
  at System.RuntimeType.CreateInstanceDefaultCtor (System.Boolean publicOnly, System.Boolean skipCheckThis, System.Boolean fillCache, System.Threading.StackCrawlMark&amp;amp; stackMark) &amp;lt;0x100ba07c0 + 0x00057&gt; in &lt;d680a8bf3a2a4c8dbbfde665ba81f6f2#008dcf0648&amp;lt;\M-b\M^@\M-&amp;amp;&gt;
Jan 30 13:24:02 iPhone-de-Marcos AnAwesomeApp.iOS[320] &lt;Notice&gt;: critical: Stacktrace:
Jan 30 13:24:02 iPhone-de-Marcos AnAwesomeApp.iOS[320] &lt;Notice&gt;: critical: 
Native stacktrace:
Jan 30 13:24:02 iPhone-de-Marcos AnAwesomeApp.iOS[320] &lt;Notice&gt;: critical:  0   AnAwesomeApp.iOS                    0x000000010401bdb4 &lt;em&gt;ZN7plcrash3BIT5async24dwarf&lt;/em&gt;cfa&lt;em&gt;state&lt;/em&gt;iteratorIyxE4nextEPjPNS1&lt;em&gt;28plcrash&lt;/em&gt;dwarf&lt;em&gt;cfa&lt;/em&gt;reg&lt;em&gt;rule&lt;/em&gt;tEPy + 236452
Jan 30 13:24:02 iPhone-de-Marcos AnAwesomeApp.iOS[320] &lt;Notice&gt;: critical:  1   libsystem&lt;em&gt;platform.dylib            0x0000000183edbb50 _sigtramp + 52
Jan 30 13:24:02 iPhone-de-Marcos AnAwesomeApp.iOS[320] &lt;Notice&gt;: critical:  2   libsystem&lt;/em&gt;pthread.dylib             0x0000000183ee12f8 &lt;redacted&gt; + 396
Jan 30 13:24:02 iPhone-de-Marcos AnAwesomeApp.iOS[320] &lt;Notice&gt;: critical:  3   libsystem&lt;em&gt;c.dylib                   0x0000000183d3afbc abort + 140
Jan 30 13:24:02 iPhone-de-Marcos AnAwesomeApp.iOS[320] &lt;Notice&gt;: critical:  4   AnAwesomeApp.iOS                    0x000000010415ad40 xamarin&lt;/em&gt;get&lt;em&gt;block&lt;/em&gt;descriptor + 5036
Jan 30 13:24:02 iPhone-de-Marcos AnAwesomeApp.iOS[320] &lt;Notice&gt;: critical:  5   AnAwesomeApp.iOS                    0x0000000104063800 &lt;em&gt;ZN7plcrash3BIT5async24dwarf&lt;/em&gt;cfa&lt;em&gt;state&lt;/em&gt;iteratorIyxE4nextEPjPNS1&lt;em&gt;28plcrash&lt;/em&gt;dwarf&lt;em&gt;cfa&lt;/em&gt;reg&lt;em&gt;rule&lt;/em&gt;tEPy + 529904
Jan 30 13:24:02 iPhone-de-Marcos AnAwesomeApp.iOS[320] &lt;Notice&gt;: critical:  6   AnAwesomeApp.iOS                    0x000000010401b914 &lt;em&gt;ZN7plcrash3BIT5async24dwarf&lt;/em&gt;cfa&lt;em&gt;state&lt;/em&gt;iteratorIyxE4nextEPjPNS1&lt;em&gt;28plcrash&lt;/em&gt;dwarf&lt;em&gt;cfa&lt;/em&gt;reg&lt;em&gt;rule&lt;/em&gt;tEPy + 235268
Jan 30 13:24:02 iPhone-de-Marcos AnAwesomeApp.iOS[320] &lt;Notice&gt;: critical:  7   AnAwesomeApp.iOS                    0x000000010401a724 &lt;em&gt;ZN7plcrash3BIT5async24dwarf&lt;/em&gt;cfa&lt;em&gt;state&lt;/em&gt;iteratorIyxE4nextEPjPNS1&lt;em&gt;28plcrash&lt;/em&gt;dwarf&lt;em&gt;cfa&lt;/em&gt;reg&lt;em&gt;rule&lt;/em&gt;tEPy + 230676
Jan 30 13:24:02 iPhone-de-Marcos AnAwesomeApp.iOS[320] &lt;Notice&gt;: critical:  8   AnAwesomeApp.iOS                    0x0000000104012334 &lt;em&gt;ZN7plcrash3BIT5async24dwarf&lt;/em&gt;cfa&lt;em&gt;state&lt;/em&gt;iteratorIyxE4nextEPjPNS1&lt;em&gt;28plcrash&lt;/em&gt;dwarf&lt;em&gt;cfa&lt;/em&gt;reg&lt;em&gt;rule&lt;/em&gt;tEPy + 196900
Jan 30 13:24:02 iPhone-de-Marcos AnAwesomeApp.iOS[320] &lt;Notice&gt;: critical:  9   AnAwesomeApp.iOS                    0x00000001010449b8 sqlite3&lt;em&gt;db&lt;/em&gt;readonly + 8426368
Jan 30 13:24:02 iPhone-de-Marcos AnAwesomeApp.iOS[320] &lt;Notice&gt;: critical:  10  AnAwesomeApp.iOS                    0x0000000100a68bb0 sqlite3&lt;em&gt;db&lt;/em&gt;readonly + 2282872
Jan 30 13:24:02 iPhone-de-Marcos AnAwesomeApp.iOS[320] &lt;Notice&gt;: critical:  11  AnAwesomeApp.iOS                    0x0000000100fef3b4 sqlite3&lt;em&gt;db&lt;/em&gt;readonly + 8076668
Jan 30 13:24:02 iPhone-de-Marcos AnAwesomeApp.iOS[320] &lt;Notice&gt;: critical:  12  AnAwesomeApp.iOS                    0x000000010402b698 &lt;em&gt;ZN7plcrash3BIT5async24dwarf&lt;/em&gt;cfa&lt;em&gt;state&lt;/em&gt;iteratorIyxE4nextEPjPNS1&lt;em&gt;28plcrash&lt;/em&gt;dwarf&lt;em&gt;cfa&lt;/em&gt;reg&lt;em&gt;rule&lt;/em&gt;tEPy + 300168
Jan 30 13:24:02 iPhone-de-Marcos AnAwesomeApp.iOS[320] &lt;Notice&gt;: critical:  13  AnAwesomeApp.iOS                    0x00000001040a7d0c &lt;em&gt;ZN7plcrash3BIT5async24dwarf&lt;/em&gt;cfa&lt;em&gt;state&lt;/em&gt;iteratorIyxE4nextEPjPNS1&lt;em&gt;28plcrash&lt;/em&gt;dwarf&lt;em&gt;cfa&lt;/em&gt;reg&lt;em&gt;rule&lt;/em&gt;tEPy + 809724
Jan 30 13:24:02 iPhone-de-Marcos AnAwesomeApp.iOS[320] &lt;Notice&gt;: critical:  14  AnAwesomeApp.iOS                    0x00000001040aafb0 &lt;em&gt;ZN7plcrash3BIT5async24dwarf&lt;/em&gt;cfa&lt;em&gt;state&lt;/em&gt;iteratorIyxE4nextEPjPNS1&lt;em&gt;28plcrash&lt;/em&gt;dwarf&lt;em&gt;cfa&lt;/em&gt;reg&lt;em&gt;rule&lt;/em&gt;tEPy + 822688
Jan 30 13:24:02 iPhone-de-Marcos AnAwesomeApp.iOS[320] &lt;Notice&gt;: critical:  15  AnAwesomeApp.iOS                    0x000000010400eb80 &lt;em&gt;ZN7plcrash3BIT5async24dwarf&lt;/em&gt;cfa&lt;em&gt;state&lt;/em&gt;iteratorIyxE4nextEPjPNS1&lt;em&gt;28plcrash&lt;/em&gt;dwarf&lt;em&gt;cfa&lt;/em&gt;reg&lt;em&gt;rule&lt;/em&gt;tEPy + 182640
Jan 30 13:24:02 iPhone-de-Marcos AnAwesomeApp.iOS[320] &lt;Notice&gt;: critical:  16  AnAwesomeApp.iOS                    0x0000000104161d10 xamarin&lt;em&gt;localized&lt;/em&gt;string&lt;em&gt;format&lt;/em&gt;9 + 3236
Jan 30 13:24:02 iPhone-de-Marcos AnAwesomeApp.iOS[320] &lt;Notice&gt;: critical:  17  AnAwesomeApp.iOS                    0x0000000100a67f48 sqlite3&lt;em&gt;db&lt;/em&gt;readonly + 2279696
Jan 30 13:24:02 iPhone-de-Marcos AnAwesomeApp.iOS[320] &lt;Notice&gt;: critical:  18  libdyld.dylib                       0x0000000183c9c56c &lt;redacted&gt; + 4&lt;/p&gt;

&lt;h1&gt;Jan 30 13:24:02 iPhone-de-Marcos AnAwesomeApp.iOS[320] &lt;Notice&gt;: critical:&lt;/h1&gt;

&lt;p&gt;Got a SIGABRT while executing native code. This usually indicates
a fatal error in the mono runtime or one of the native libraries &lt;/p&gt;

&lt;h1&gt;used by your application.&lt;/h1&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Where was the issue? Well, there was a missalignment in some packages from the
group Akavache–ReactiveUI–ReactiveX–SQLite. Although we had double checked this
at the beginning there should be anything we forgot because it didn’t work by
that day.&lt;/p&gt;

&lt;p&gt;It looks so clear now as were getting some other &lt;code&gt;MissingMethodException&lt;/code&gt; at
&lt;code&gt;Activator.CreateInstance()&lt;/code&gt; which I bet was because the exact type wasn’t
present in the final bundle.&lt;/p&gt;

&lt;p&gt;It’s resembled what Dominique Pochat —an Escalation Engineer on COM at
Microsoft— told me 12 (sigh) years ago:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Never trust customers&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He pushed me to check everything by my own, as sometimes customers don’t really
understand the underlying happening, and the issues can come from the most
stupid corners. More than a decade later: thanks again Dominique for your
learnings!&lt;/p&gt;

&lt;h3&gt;Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://gist.github.com/cvan/8630f847f579f90e0c014dc5199c337b"&gt;https://gist.github.com/cvan/8630f847f579f90e0c014dc5199c337b&lt;/a&gt; —how to
enable HTTPS, &lt;em&gt;free&lt;/em&gt;, with your own domain at GitHub Pages&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://webmasters.stackexchange.com/questions/37907/how-to-use-cloudflare-and-namecheap-email-forwarding-at-the-same-time/58651#58651"&gt;https://webmasters.stackexchange.com/questions/37907/how-to-use-cloudflare-and-namecheap-email-forwarding-at-the-same-time/58651#58651&lt;/a&gt;
—how to enable mail forwarding after setting above (I’m still waiting those
48 hours…)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Mon, 29 Jan 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Monday</title>
  <guid>https://marcoscobena.com/#/2018-1-29</guid>
  <description>&lt;p&gt;I’ve been working during the last two weeks on a Getting Started package to
start future projects at DevsDNA. One of the things was asked for is supporting
.NET Standard 2.0 from the very beginning, to be ready for upcoming movements in
the .NET ecosystem.&lt;/p&gt;

&lt;p&gt;Doing some tests with out beta version I stumbled upon lot of errors when adding
such to a Xamarin.iOS project —within a Forms solution— and decided to move into
a bug at Xamarin.iOS product:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/xamarin/xamarin-macios/issues/3349"&gt;https://github.com/xamarin/xamarin-macios/issues/3349&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Álex Soto’s confirmed this as a bug, and added a repro. project which will help
Xamarin guys to troubleshoot it easier. You probably won’t ever read this Álex
but thanks man!&lt;/p&gt;

&lt;h3&gt;Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://carbon.now.sh"&gt;https://carbon.now.sh&lt;/a&gt; —beauty code screenshots, although we’d breaking
readability for handicapped people&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/PowerShell/PowerShell"&gt;https://github.com/PowerShell/PowerShell&lt;/a&gt; —cross-platform PowerShell, macOS
included&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://gist.github.com/a4099181/074a6c3dd524ea0d343382137492399c"&gt;https://gist.github.com/a4099181/074a6c3dd524ea0d343382137492399c&lt;/a&gt;
—PowerShell script to turn packages.config into PackageReferences within
CSPROJs (now you get above link)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Sun, 28 Jan 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Saturday</title>
  <guid>https://marcoscobena.com/#/2018-1-27</guid>
  <description>&lt;p&gt;This week haven’t touched any single line on Joy but en-joy-ed 🤭 working on the
Flappy Bird pixel copy. I borrowed some code on how to make the bird jump but
more than jumping it was actually getting frozen. However, I found the key in
some way:&lt;/p&gt;

&lt;p&gt;&lt;img src="items/images/FlappyBirdGame.gif" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Since the Internet’s full of Flappy Bird resources I may start using more
original assets, but I don’t have support for sprite sheets —should consider
adding this however.&lt;/p&gt;

&lt;p&gt;Making the bird jump happens within the game it-self, but found walls something
to pull out into somewhat like a component. It came to my mind how Wave Engine
—my very little experience working on games’ mostly with it— adds entities to
the scenes.&lt;/p&gt;

&lt;p&gt;Instead of supporting that list from a beginning simply wrote down how I’d like
to work with it:&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;    public class FlappyBird : Game
    {
        [...]&lt;/p&gt;

&lt;p&gt;        public FlappyBird() : base(32, 32)
        {
            [...]&lt;/p&gt;

&lt;p&gt;            wall = new Wall(this);
        }&lt;/p&gt;

&lt;p&gt;        public override void Load()
        {
            [...]&lt;/p&gt;

&lt;p&gt;            wall.Load();
        }&lt;/p&gt;

&lt;p&gt;        public override void Think(TimeSpan timeSincePreviousCall)
        {
            wall.Think(timeSincePreviousCall);&lt;/p&gt;

&lt;p&gt;            if (birdY &amp;lt; 0)
            {
                birdY = 0;
                birdYSpeed = 0;
            }
            else if (wall.Touches(birdX, birdY) || birdY &gt;= PaintingSize.Height)
            {
                Load();
                return;
            }&lt;/p&gt;

&lt;p&gt;            [...]
        }&lt;/p&gt;

&lt;p&gt;        public override void Paint()
        {
            Erase(SKColors.White);&lt;/p&gt;

&lt;p&gt;            wall.Paint();
            Paint(bird, (int)birdX, (int)birdY);
        }
    }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;Simply by passing &lt;code&gt;Game&lt;/code&gt; to &lt;code&gt;Wall&lt;/code&gt; this last turns into a sub-game, which
immediately gives context to new users on how to fill it of code. I’m thinking
on standardize this with an interface.&lt;/p&gt;

&lt;p&gt;Finally, I still don’t handle the bird actually passing through the gap, too
because I don’t feel comfortable with the calcs needed for so, and am also
considering to simplify as much as possible the collision detection.&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Fri, 26 Jan 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Friday</title>
  <guid>https://marcoscobena.com/#/2018-1-26</guid>
  <description>&lt;p&gt;I’ve been recently playing a little bit with NuGet site and really liked its
simplicity. How packages are uploaded, updated, edited, etc. Today I discovered
that if you want to publish a prerelease version there’s no checkbox out there,
nor a complex system for this, but adding a suffix to your version:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1.0.0-beta&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;, for instance. Want to exit the beta world? Just remove that suffix and upload
it.&lt;/p&gt;

&lt;p&gt;Aaand, take note deleting packages isn’t possible, the most you can achieve’s
unlisting them, which’s fine too.&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Thu, 25 Jan 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Thursday</title>
  <guid>https://marcoscobena.com/#/2018-1-25</guid>
  <description>&lt;h3&gt;MAP_JIT error when launching a Xamarin.iOS app (II)&lt;/h3&gt;

&lt;p&gt;After multiple attempts on delaying RxUI execution we still get the same error
—notice the appearance of Akavache:&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;    System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.
    System.TypeInitializationException: The type initializer for ‘Akavache.BlobCache’ threw an exception.
    System.TypeInitializationException: The type initializer for ‘System.Reactive.Concurrency.DefaultScheduler’ threw an exception.
    System.TypeInitializationException: The type initializer for ‘System.Reactive.Concurrency.ConcurrencyAbstractionLayer’ threw an exception.
    System.TypeInitializationException: The type initializer for ‘System.Reactive.Concurrency.NewThreadScheduler’ threw an exception.
    System.NullReferenceException: Object reference not set to an instance of an object
     at System.Reactive.PlatformServices.SystemClock.Register (System.Reactive.Concurrency.LocalScheduler [...]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;We figured out one of the SQLite packages within the iOS project was not version
aligned with the rest; however, this neither solved the issue.&lt;/p&gt;

&lt;p&gt;One important piece’s that the same code building in MacInCloud —with iOS SDK
10.x I guess— does run fine, and my mate’s machine’s 11.x. Since we think there
must be any difference related to that which surfaces the issue.&lt;/p&gt;

&lt;p&gt;Talking with him I learned Forms’
&lt;a href="https://github.com/xamarin/Xamarin.Forms/blob/2d9288eee6e6f197364a64308183725e7bd561f9/Xamarin.Forms.Core/DependencyService.cs"&gt;DependencyService&lt;/a&gt;’s
actually lazy when instantiating.&lt;/p&gt;

&lt;h3&gt;WhenTheAppWasBuilt&lt;/h3&gt;

&lt;p&gt;Adding it to a .NET Standard 2.0 lib. obviously the date returned was set at
2000s so Googled for it and discovered how &lt;code&gt;AssemblyVersion&lt;/code&gt; attribute can be
brought back to .NET Standard ecosystem. We’ve noted all this down within the
&lt;a href="https://github.com/DevsDNA/WhenTheAppWasBuilt#how-to-use-it"&gt;package
documentation&lt;/a&gt;.&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Wed, 24 Jan 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Wednesday</title>
  <guid>https://marcoscobena.com/#/2018-1-24</guid>
  <description>&lt;h3&gt;MAP_JIT error when launching a Xamarin.iOS app&lt;/h3&gt;

&lt;p&gt;My coworker Marcos Antonio's having an issue with a Xamarin.iOS app closing at
start-up running in Release on an iPod Touch, so we made pair debugging
together. What the device output pad shows at VS for Mac is this error:&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;System Policy: MAP_JIT requires the dynamic-codesigning entitlement
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;In the beginning, reading JIT recalls AOT’s not disabled. However, it’s, so we
go through the Devices window within Xcode and discover the actual issue going
down the log: Rx’s &lt;code&gt;SystemClock&lt;/code&gt; is throwing a &lt;code&gt;NullReferenceException&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://media.giphy.com/media/3orieTLuLv7piizGs8/giphy.gif" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;After some time debugging, aligning Rx packages from core project to iOS one, we
discovered that as soon as you avoid any code regarding ReactiveUI —in our case—
the app starts. So, our assumption comes from Rx trying to be initialized before
time.&lt;/p&gt;

&lt;p&gt;How to fix this? We currently have no solution, but reading along Xamarin’s
Forums, Stack Overflow and so on, if you experience a MAP_JIT issue we can say
that’s not the actual issue, so go back to raw logs and keep looking for a
managed stack trace, which surely there it’ll be waiting for care.&lt;/p&gt;

&lt;h3&gt;SSH keys (part III/n)&lt;/h3&gt;

&lt;p&gt;I’ve discovered my issues with SSH keys isn’t macOS being updated but a computer
restart. Calling &lt;code&gt;ssh-add&lt;/code&gt; acts on the current SSH agent running, but doesn’t
persist over restarts. Think will automate it in any way.&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Tue, 23 Jan 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Tuesday</title>
  <guid>https://marcoscobena.com/#/2018-1-23</guid>
  <description>&lt;p&gt;Working on our own lib. to bundle all that stuff we usually need on each project
I stumbled upon one issue when creating the unit testing project: VS for Mac
doesn't detect Unit Tests from .NET Standard libraries, independent of the NUnit
version used —2.x to 3.x. F**k!&lt;/p&gt;

&lt;p&gt;After trying with newer and older NUnit versions finally had no other way than
going back to a common .NET lib., actually the project type suggested within VS.&lt;/p&gt;

&lt;p&gt;Fully embracing .NET Standard from the perspective of a macOS user’s somewhat
like a pain nowadays...&lt;/p&gt;

&lt;p&gt;On other aspects, I finally found a quick solution to avoid a specific StyleCop
rule within one of our projects —we have a global StyleCop.Settings file at our
solution root. Simply add a similar file &lt;em&gt;in your project root&lt;/em&gt; knowing that
will be load just after the global one, so freely disable that what you want:&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;StyleCopSettings Version="105"&amp;gt;
  &amp;lt;Analyzers&amp;gt;
    &amp;lt;Analyzer AnalyzerId="StyleCop.CSharp.DocumentationRules"&amp;gt;
      &amp;lt;Rules&amp;gt;
        &amp;lt;Rule Name="ElementsMustBeDocumented"&amp;gt;
          &amp;lt;RuleSettings&amp;gt;
            &amp;lt;BooleanProperty Name="Enabled"&amp;gt;False&amp;lt;/BooleanProperty&amp;gt;
          &amp;lt;/RuleSettings&amp;gt;
        &amp;lt;/Rule&amp;gt;
      &amp;lt;/Rules&amp;gt;
    &amp;lt;/Analyzer&amp;gt;
  &amp;lt;/Analyzers&amp;gt;
&amp;lt;/StyleCopSettings&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;That sort of cascade loading resembled to GAC priorities when loading assemblies
back in 2000s —am getting old, I know.&lt;/p&gt;

&lt;p&gt;I got to this from &lt;a href="https://stackoverflow.com/a/3296152"&gt;this&lt;/a&gt; Stack Overflow
thread.&lt;/p&gt;

&lt;p&gt;Also I’m trying to learn in those free mins. which are the “new” C# 7 features
I could actually use in my daily routine, and this’ the one I’m more enjoying
actually:&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;    var number = 42;&lt;/p&gt;

&lt;p&gt;    if (number is int integer)
    {
        Console.WriteLine($"It's an integer! {integer}");
    }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;How much time I’d have spent casting number to int, and accessing it after… And
how elegant’s this solution now 😍&lt;/p&gt;

&lt;p&gt;If you want “the link” for those features go
&lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7"&gt;here&lt;/a&gt;.
Welcome!&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Mon, 22 Jan 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Monday</title>
  <guid>https://marcoscobena.com/#/2018-1-22</guid>
  <description>&lt;p&gt;It turns out &lt;a href="http://marcoscobena.com/#/2018-1-19"&gt;the fix&lt;/a&gt; I found last day to
fix SSH connection with GitHub applies equally to Visual Studio Team Services:
the SSH agent was missing the key I created specifically for it. So,
SourceTree’s fully working with my multi-keys env. SSH ✌️&lt;/p&gt;

&lt;p&gt;Looking for something in Google came up to a Xamarin.Forms app where navigation
was being handled entirely through messaging, and the actual code in charge of
pushing and popping pages placed at main &lt;code&gt;App&lt;/code&gt;’s code behind.&lt;/p&gt;

&lt;p&gt;You ask for navigation like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MessagingCenter.Send(new NavigationMessage { PageType = typeof(YourPageToGo)},
NavigationMessageTitle);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;; and receive it in the same way:&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;    MessagingCenter.Subscribe&lt;NavigationMessage&gt;(this, NavigationMessageTitle, message =&gt;
    {
        switch (message.PageType)
        {
            case typeof(YourPageToGo):
                var page = new YourPageToGo();
                MainPage.Navigation.PushAsync(page);
                break;
            [...]
        }
    });
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;I have some concerns regarding awaiting the navigation to happen, since your
loose that. However, it’s something which could be workaround-ed.&lt;/p&gt;

&lt;p&gt;It always recalls my attention what it’s possible to achieve with vanilla
Xamarin.Forms, without MVVM frameworks, just using what you already have.&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Sun, 21 Jan 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Sunday</title>
  <guid>https://marcoscobena.com/#/2018-1-21</guid>
  <description>&lt;p&gt;This week, in order to make the library more solid, decided to write a small
Flappy Bird alike game with it. However, it wasn’t possible: I had focused on
the scripting side but the underlying code was not powerful enough to handle
more dynamic sort of games. I had a powerful state-based way of writing games,
and just that.&lt;/p&gt;

&lt;p&gt;So went downstairs and started rewriting from bottom up —and named Joy it
finally.&lt;/p&gt;

&lt;p&gt;With some ideas from LÖVE 2D, Joy’s now capable of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;drawing images in (x, y), and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;detect touchs within an area&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;; everything with a more human API (naming mostly).&lt;/p&gt;

&lt;p&gt;This’ the playground have been using for the initial steps:&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;    public class FooGame : Game
    {
        [...]&lt;/p&gt;

&lt;p&gt;        public FooGame() : base(32, 32)
        { }&lt;/p&gt;

&lt;p&gt;        public override void Load()
        {
            accumulatedTime = TimeSpan.Zero;
            framesPerSecond = 0;
            hue = 0;
            image = LoadImage("TicTacToe.png");
            imageX = 0;
            leftArea = new SKRect(0, 0, 16, 32);
            rightArea = new SKRect(16, 0, 32, 32);
        }&lt;/p&gt;

&lt;p&gt;        public override void Think(TimeSpan timeSincePreviousCall)
        {
            accumulatedTime += timeSincePreviousCall;
            framesPerSecond++;
            
            if (accumulatedTime &gt;= TimeSpan.FromSeconds(1))
            {
                System.Diagnostics.Debug.WriteLine($"{framesPerSecond} FPS");
                accumulatedTime = TimeSpan.Zero;
                framesPerSecond = 0;
            }
            
            hue = (hue + 1) % 360;&lt;/p&gt;

&lt;p&gt;            if (DetectsTouchAt(leftArea))
            {
                imageX--;
            }
            else if (DetectsTouchAt(rightArea))
            {
                imageX++;
            }
        }&lt;/p&gt;

&lt;p&gt;        public override void Paint()
        {
            var color = SKColor.FromHsl(hue, 50, 50);
            Erase(color);&lt;/p&gt;

&lt;p&gt;            Paint(image, imageX, 0);
        }
    }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;, producing this output:&lt;/p&gt;

&lt;p&gt;&lt;img src="items/images/FooGame.gif" alt="" /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;I’ve been thinking the way Joy exposes touchs isn’t suitable for more complex
situations, so probably will work it out a little bit. However, I think have all
the basic pieces to finally write that Flappy Bird prototype.&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Sat, 20 Jan 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Friday</title>
  <guid>https://marcoscobena.com/#/2018-1-19</guid>
  <description>&lt;p&gt;Keeping with the Azure class —AZR110 at Xamarin University— it got to a point
where following up in Mac was a little bit harder because of the lack the wizard
when adding new table controllers. This’ something you should do manually and I
was running out of time. It’d be so nice to have VS Mac version aligned to
Windows one in this aspect too.&lt;/p&gt;

&lt;p&gt;Updating macOS High Sierra to 10.13.2 all my GitHub repos. set up with SSH
stopped working with a wonderful “authentication failed” message. It turned out
was as easy as adding again the keys:&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh-add -K ~/.ssh/YOUR_PRIVATE_KEY_NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Thu, 18 Jan 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Thursday</title>
  <guid>https://marcoscobena.com/#/2018-1-18</guid>
  <description>&lt;p&gt;For the very first time I created an ASP.NET MVC project within VS for Mac and
published in Azure &lt;a href="https://blog.xamarin.com/publish-azure-visual-studio-mac/"&gt;everything from the
Mac&lt;/a&gt;. And, to be
honest, worked like a charm. After struggling with .NET Standard differences
between Windows and Mac this was a light of hope. (Just kidding.)&lt;/p&gt;

&lt;p&gt;In other aspects, got an e-mail that &lt;a href="https://bugzilla.xamarin.com/show_bug.cgi?id=61120"&gt;Xamarin just fixed the
bug&lt;/a&gt; I reported last month.
Sounds good!&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Wed, 17 Jan 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Wednesday</title>
  <guid>https://marcoscobena.com/#/2018-1-17</guid>
  <description>&lt;p&gt;In a quick sentence: I feel Xamarin ecosystem isn’t currently ready for fully
working with .NET Standard libraries. And can fully understand it, as we’re all
moving our stuff to .NET Standard but, you know, are in the process.&lt;/p&gt;

&lt;p&gt;In order to have a ready-from-departure Xamarin.Forms app bundling .NET Standard
this must be done from Windows. (Have latest stable versions on both sides.) Or,
you can modify CSPROJs created in Mac to move from packages.config to bundled in
dependencies.&lt;/p&gt;

&lt;p&gt;I haven’t been able to build a Xamarin.iOS —Forms actually— app which consumes a
.NET Standard 2.0 library where both consume a NuGet package having another core
.NET Standard lib. with Android and iOS ones. Take that!&lt;/p&gt;

&lt;p&gt;To be honest, most of the issues came from ReactiveUI and Refit. iOS build
barked on missing dependencies, double ones, etc.&lt;/p&gt;

&lt;p&gt;More in depth, most of my issues came from using ReactiveUI alpha packages,
which I needed because don’t rely on WPF’s PresentationFramework DLL and target
.NET Standard. It was crazy to play adding and removing stuff to check whether
the NuGet package could be installed —and building— in a blank Forms app.&lt;/p&gt;

&lt;p&gt;However, I learnt a few interesting things, as for instance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sometimes I saw the dependencies computed didn’t match those actual. Using
&lt;code&gt;dotnet&lt;/code&gt; CLI, it cleans NuGets everywhere in my machine:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dotnet nuget locals all -c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;(&lt;code&gt;-l&lt;/code&gt; will list the dirs. so you can get in and double check.)&lt;/p&gt;

&lt;p&gt;Oh, and noticed VS for Mac &lt;a href="https://forums.xamarin.com/discussion/19743/how-to-enable-word-wrap-in-text-editor"&gt;doesn’t support word
wrapping&lt;/a&gt;
:-( Never needed this before but going through a build output it’d have been so
handy.&lt;/p&gt;

&lt;p&gt;So, I decided to get rid of NuGet packaging today, and focus on the value,
which’s the libs. content. Will be back to packaging in a close future and for
sure will success then 🤞&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Tue, 16 Jan 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Tuesday</title>
  <guid>https://marcoscobena.com/#/2018-1-16</guid>
  <description>&lt;p&gt;I promise my-self the next time will create a new Xamarin.Forms project, the
core library will be moved to .NET Standard 2.0 from instant zero —because if
not, I could became crazy, again.&lt;/p&gt;

&lt;p&gt;If not doing this at the beginning, but later on, this will help me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;am I getting these errors after upgrading the project?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;/usr/local/share/dotnet/sdk/2.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.Sdk.DefaultItems.targets(5,5):
Error: Duplicate 'EmbeddedResource' items were included. The .NET SDK includes
'EmbeddedResource' items from your project directory by default. You can either
remove these items from your project file, or set the
'EnableDefaultEmbeddedResourceItems' property to 'false' if you want to
explicitly include them in your project file. For more information, see
https://aka.ms/sdkimplicititems. The duplicate items were: 'App.xaml';
'ExamplePage.xaml' (Example.Core)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;; then my solution is
&lt;a href="https://bugzilla.xamarin.com/show_bug.cgi?id=58897"&gt;here&lt;/a&gt;. More exactly, this
must be the project file:&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ItemGroup&amp;gt;
    &amp;lt;EmbeddedResource Remove="ExamplePage.xaml" /&amp;gt;
&amp;lt;/ItemGroup&amp;gt;
&amp;lt;ItemGroup&amp;gt;
    &amp;lt;None Remove="ExamplePage.xaml" /&amp;gt;
&amp;lt;/ItemGroup&amp;gt;
&amp;lt;ItemGroup&amp;gt;
    &amp;lt;EmbeddedResource Include="ExamplePage.xaml" /&amp;gt;
&amp;lt;/ItemGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;Three times the same file? Yup, three times. Don’t ask.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Xamarin has a &lt;a href="https://developer.xamarin.com/guides/xamarin-forms/under-the-hood/net-standard/"&gt;quick
guide&lt;/a&gt;
on moving projects from PCL to .NET Standard&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m becoming a PhD. in .NET Standard Compatibility Issues.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://media.giphy.com/media/ZWhA850E7azfO/giphy.gif" alt="" /&gt;&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Mon, 15 Jan 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Monday</title>
  <guid>https://marcoscobena.com/#/2018-1-15</guid>
  <description>&lt;p&gt;A few things have learnt today:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Android’s &lt;code&gt;Resource.Id.Content&lt;/code&gt; points to the root view of that &lt;code&gt;Activity&lt;/code&gt;
you’re asking on, for instance:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var rootView = CrossCurrentActivity.Current.Activity.FindViewById(Resource.Id.Content);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the clearest picture —dynamic indeed— for .netstandard vs .NET ecosystem
versioning:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="http://immo.landwerth.net/netstandard-versions/#"&gt;http://immo.landwerth.net/netstandard-versions/#&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;would you like to switch to SSH with your Visual Studio Team Services
projects but get once and again an authentication error?
&lt;a href="https://stackoverflow.com/a/46990403"&gt;This&lt;/a&gt;’ your answer&lt;/li&gt;
&lt;/ul&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Sun, 14 Jan 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Saturday</title>
  <guid>https://marcoscobena.com/#/2018-1-13</guid>
  <description>&lt;p&gt;I’m really happy with the achievements this week. Although started it increasing
the descriptive level of the first frame —a Frame is actually a room, a scene
where player can interact—, ended up proposing my-self a new goal of writing Tic
Tac Toe game with my small engine/library.&lt;/p&gt;

&lt;p&gt;And got it yesterday afternoon! CPU’s not the most clever of his class —haven’t
spent time on a Minimax algorithm— but chooses randomly the next movement.&lt;/p&gt;

&lt;p&gt;&lt;img src="items/images/TicTactToe.gif" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;What for me is the most important piece is working on this small game made me
improve the API exposed for Scripts, for example:&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;    DrawAt("TicTacToe_Cross.png", selectedItem.Area.Value.Location);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Now we can draw images at whatever position in any instant. I find this so
powerful, really. (Another day will talk about the &lt;code&gt;Painter&lt;/code&gt;, which’s the on in
charge of actually drawing —by the way, relies on SkiaSharp).&lt;/p&gt;

&lt;p&gt;So, how does the Script looks like?&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;    Script = new Task(async () =&gt;
    {
        // Consts.
        var topWiningRow = new Item[] { topLeftItem, topCenterItem, topRightItem };
        var middleWiningRow = new Item[] { middleLeftItem, middleCenterItem, middleRightItem };
        [...]&lt;/p&gt;

&lt;p&gt;        // Vars.
        var cpuItems = new List&lt;Item&gt;();
        var playerItems = new List&lt;Item&gt;();
        var random = new Random();&lt;/p&gt;

&lt;p&gt;        // Funcs.
        Func&lt;IEnumerable&lt;Item&gt;, IEnumerable&lt;Item&gt;, bool&gt; aContainsAllInB = (a, b) =&gt;
        {
            [...]&lt;/p&gt;

&lt;p&gt;            return areAllContained;
        };
        Func&lt;List&lt;Item&gt;, bool&gt; wins = items =&gt;
        {
            [...]&lt;/p&gt;

&lt;p&gt;            return really;
        };&lt;/p&gt;

&lt;p&gt;        // Logic
        while (Items.Any())
        {
            Show("You move.");&lt;/p&gt;

&lt;p&gt;            var selectedItem = await Interaction();
            playerItems.Add(selectedItem);
            Items.Remove(selectedItem);
            DrawAt("TicTacToe_Cross.png", selectedItem.Area.Value.Location);&lt;/p&gt;

&lt;p&gt;            if (wins(playerItems))
            {
                Show("You win!");
                break;
            }&lt;/p&gt;

&lt;p&gt;            if (!Items.Any())
            {
                Show("Withdraw.");
                break;
            }&lt;/p&gt;

&lt;p&gt;            Show("CPU is thinking...");
            await Task.Delay(1500);&lt;/p&gt;

&lt;p&gt;            var cpuRandomItemIndex = random.Next(Items.Count);
            var cpuRandomItem = Items[cpuRandomItemIndex];
            cpuItems.Add(cpuRandomItem);
            Items.Remove(cpuRandomItem);
            DrawAt("TicTacToe_Circle.png", cpuRandomItem.Area.Value.Location);&lt;/p&gt;

&lt;p&gt;            if (wins(cpuItems))
            {
                Show("CPU wins!");
                break;
            }&lt;/p&gt;

&lt;p&gt;            if (!Items.Any())
            {
                Show("Withdraw.");
                break;
            }
        }
    });
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;In an async/await fashion the entire game’s expressed in just a few lines of
code —and I see some refactoring available there… Yesterday was thinking too
that this’ actually powerful to show children how to code small games, introduce
them into the art of programming and keep those in a quite small managed
environment. Will have to think about this a little bit more.&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Fri, 12 Jan 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Thursday</title>
  <guid>https://marcoscobena.com/#/2018-1-11</guid>
  <description>&lt;p&gt;Following with yesterday task, double checked the &lt;code&gt;HttpClient&lt;/code&gt; was being
refreshed correctly in both Android &amp;amp; iOS and jumped to add some unit tests.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;BaseViewModel&lt;/code&gt; relies on ReactiveUI so the first issue I encountered was
NUnit console barking on a missing PresentationFramework.dll (WPF, actually).
Asking Google found a comment on a GitHub issue where Geoffrey Huntley
recommends to consume myget packages as ReactiveUI is on 8.0 (pre-stage
packages) where WPF dependency has already being removed.&lt;/p&gt;

&lt;p&gt;And it worked! However, as soon as in my tests any &lt;code&gt;PropertyChanged&lt;/code&gt; event is
being fired a get another exception on a missing type (don’t remember which one
was now). No problem, a workaround is to encapsulate such prop. setting
—actually already is— and fake it like:&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;    mockViewModel.Setup(vm =&gt; vm.SetBusy(true, It.IsAny&lt;bool&gt;()))
                 .Verifiable();
    mockViewModel.Setup(vm =&gt; vm.SetBusy(false, It.IsAny&lt;bool&gt;()))
                 .Verifiable();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;(We already had such encapsulation because don’t want every parent VM to force a
loading overlay.)&lt;/p&gt;

&lt;p&gt;Since I want to test a &lt;code&gt;protected&lt;/code&gt; method in a base class, my initial attempt
has been to make my tests class inherit such; however, finally found a better
approach of adding a &lt;code&gt;FakeViewModel&lt;/code&gt; class in the tests project and use this
last for testing:&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;    public class FakeViewModel : BaseReactiveViewModel
    {
        [...]&lt;/p&gt;

&lt;p&gt;        public async Task&lt;bool&gt; Test(Func&lt;Task&lt;bool&gt;&gt; operation)
        {
            var result = await ExecuteInternetBoundCallAsync(() =&gt; operation());&lt;/p&gt;

&lt;p&gt;            return result;
        }&lt;/p&gt;

&lt;p&gt;        public override void SetBusy(bool busyState, bool disableBusy)
        {
            // Intentionally blank
        }&lt;/p&gt;

&lt;p&gt;        protected override Task RefreshTokenAndGatewaysAsync()
        {
            return Task.FromResult(Unit.Default);
        }
    }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Test()&lt;/code&gt; is our friendly endpoint here. One of the tests I was looking for is
making sure after 1 and/or max. retries it ends up returning the expected value,
so this &lt;code&gt;Operation()&lt;/code&gt; allows me to easily set each test up:&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;    Task&lt;bool&gt; Operation()
    {
        if (howManyFailsBeforeSuccess &gt; 0)
        {
            howManyFailsBeforeSuccess--;&lt;/p&gt;

&lt;p&gt;            var ex = ApiException.Create(new HttpResponseMessage(HttpStatusCode.Unauthorized));
            throw ex.Result;
        }&lt;/p&gt;

&lt;p&gt;        return Task.FromResult(true);
    }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;And, finally, a test looks like:&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;    [Test]
    public async Task GettingUnauthorizedThreeTimesForcesARetryAndWorks()
    {
        howManyFailsBeforeSuccess = MaxRetries;&lt;/p&gt;

&lt;p&gt;        var success = await mockViewModel.Object.Test(Operation);&lt;/p&gt;

&lt;p&gt;        Assert.IsTrue(success);
    }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;I’d like to ask you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;would you have done the &lt;code&gt;FakeViewModel&lt;/code&gt; approach in a different/better way?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks in advance!&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Wed, 10 Jan 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Wednesday</title>
  <guid>https://marcoscobena.com/#/2018-1-10</guid>
  <description>&lt;p&gt;Back to pre-Christmas project —Avianca’s Xamarin.Forms app for Android &amp;amp; iOS—
I’m assigned a bug on gettings 401s because token refreshes don’t seem to work.
Our app uses Refit to build the gateways provided through intermediate NuGet
packages built from our server-side workmates.&lt;/p&gt;

&lt;p&gt;Applying a retrial politic to refresh token, I’ve discovered the need to&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;refresh the token, which internally creates a new &lt;code&gt;HttpClient&lt;/code&gt;, and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;recreate the gateways, to start working with such&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some projects ago my workmates and I came up with this handy method at our
&lt;code&gt;BaseViewModel&lt;/code&gt; —have simplified code a little bit for the sake of clearness:&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;    protected async Task&lt;T&gt; ExecuteInternetBoundCallAsync&lt;T&gt;(Func&lt;Task&lt;T&gt;&gt; operation, int pendingRetries = DefaultPendingRetries)  
    {  
        var isThereConnection = CheckInternetConnectionAndAlert();  
      
        if (!isThereConnection)  
        {   
            return default(T);  
        }  
      
        T result;  
        var retry = false;  
        IsBusy = true;  
      
        try  
        {  
            result = await operation();  
        }  
        catch (Exception ex) when (ex is Refit.ApiException)  
        {  
            result = default(T);  
      
            var apiException = ex as Refit.ApiException;  
      
            if (apiException.StatusCode == HttpStatusCode.Unauthorized &amp;amp;&amp;amp; pendingRetries &gt; 0)  
            {  
                retry = true;  
            }  
            else  
            {  
                HandleStatusCode(apiException.StatusCode);  
            }  
        }  
        catch  
        {  
            result = default(T);  
      
            // Alert on something went wrong  
        }  
        finally  
        {   
            IsBusy = false;  
        }  
      
        if (retry)  
        {  
            // Refresh token &amp;amp; gateways  
            result = await ExecuteInternetBoundCallAsync(operation, pendingRetries - 1);  
        }  
      
        return result;  
    }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;C# Exception catching fits so good here. So, from our VMs, we can do things
like:&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;    var data = await ExecuteInternetBoundCallAsync&lt;DataModel&gt;(async () =&gt; await dataGateway.GetAsync());&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;; with the goal of making the call retry up to &lt;code&gt;DefaultPendingRetries&lt;/code&gt; times.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Oh! There’s too a new version of
&lt;a href="https://github.com/DevsDNA/WhenTheAppWasBuilt/"&gt;WhenTheAppWasBuilt&lt;/a&gt; 😎&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Tue, 09 Jan 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Tuesday</title>
  <guid>https://marcoscobena.com/#/2018-1-9</guid>
  <description>&lt;p&gt;After some time with the idea in mind and some other more working on a
prototype, finally knowing when an app was built is an easy task. Since years
ago I’ve missed this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;(Customer) Hey there’s a bug here&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(Me) OK, I’ll write it down to fix it; which version do you have?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(C) Mmm, where can I see that?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(M) Sorry you can’t; when did you install the app?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(C) Don’t remember, maybe a few days ago&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(M) OK, that’s fine&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And I tried to repro the bug on the latest, going backward until I found the
problematic commit. This was a typical scenario.&lt;/p&gt;

&lt;p&gt;Today, you just initialize
&lt;a href="https://github.com/DevsDNA/WhenTheAppWasBuilt/"&gt;WhenTheAppWasBuilt&lt;/a&gt; and:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;(Customer) Hey there’s a bug here&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(Me) OK, I’ll write it down to fix it; which version do you have?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(C) Mmm, where can I see that?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(M) Could you please shake your device?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(C) Sure, here says it was built on yesterday, at 3:06 am&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(M) Perfect, you have the latest release from CD, thanks!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="https://media.giphy.com/media/3ohhwto87UNnoy3kic/giphy.gif" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The idea is to enable WhenTheAppWasBuilt only while in development, and get rid
of it when going public.&lt;/p&gt;

&lt;p&gt;My previous implementation contained a way to show the alert when the screen was
oriented as landscape, but was not consistent with apps only supporting portrait
mode. Also, I tried detecting native shake gestures but default Xamarin.iOS’
&lt;code&gt;AppDelegate&lt;/code&gt; doesn’t inherit from &lt;code&gt;UIResponder&lt;/code&gt;, and was a little mess too.&lt;/p&gt;

&lt;p&gt;Thankfully found out &lt;a href="https://github.com/rdelrosario/xamarin-plugins/tree/master/DeviceMotion"&gt;DeviceMotion
plug-in&lt;/a&gt;
(thanks Rendy and co.!) which allows my initial idea from a different
perspective.&lt;/p&gt;

&lt;p&gt;In some other aspects, a few links I found handy after reinstalling Mac OS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/codemillmatt/visual-studio-mac-launcher"&gt;https://github.com/codemillmatt/visual-studio-mac-launcher&lt;/a&gt; —run it and
you’ll get a new/different VS app in your Dock&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.android.com/filetransfer/"&gt;https://www.android.com/filetransfer/&lt;/a&gt; —easily move files between your
computer and device, one way or another&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.xamarin.com/guides/android/getting_started/installation/android-emulator/xamarin-device-manager/"&gt;https://developer.xamarin.com/guides/android/getting_started/installation/android-emulator/xamarin-device-manager/&lt;/a&gt;
—I had read on Javi Suárez’s Twitter timeline it was useful so went on and
tried it (mainly to avoid installing back Android Studio), and definitely
recommend it to anyone 🙂 PS: it’s not true VS 7.4 is a requirement, as
stable one’s currently 7.3.* and it just works&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://gist.github.com/MarcosCobena/3b30e251249221478d1e17f02b6bab7b"&gt;https://gist.github.com/MarcosCobena/3b30e251249221478d1e17f02b6bab7b&lt;/a&gt; —my
Visual Studio for Mac custom key bindings, as feel much more confortable
with them&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wow, quite productive day!&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Mon, 08 Jan 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Monday</title>
  <guid>https://marcoscobena.com/#/2018-1-8</guid>
  <description>&lt;p&gt;Back from Christmas holidays with a cool task! Yeray asked me to play with
native Spotify SDKs 😙 Looking for a little bit it turns out Aaron Bockover
—this resembled me past days of Gnome’s Banshee— &lt;a href="https://github.com/abock/spotify-ios-sdk/tree/master/Xamarin"&gt;had already
done&lt;/a&gt; the initial
steps for iOS one, so took his job and continued it a little bit up to
initializing Spotify’s authentication all from Xamarin.iOS 😇&lt;/p&gt;

&lt;p&gt;I’ve spent the afternoon giving some love to our
&lt;a href="https://github.com/DevsDNA/GradientBoxView"&gt;DevsDNA.GradientBoxView&lt;/a&gt; control,
adding UWP support. Got it working in the end, but &lt;a href="https://github.com/xamarin/Xamarin.Forms/issues/1530"&gt;filled a
bug&lt;/a&gt; because
Xamarin.Forms’ Custom Renderers seem to not work from a third library.&lt;/p&gt;

&lt;p&gt;Nowadays I almost don’t open Visual Studio in Windows and had to work with its
2017 version for that UWP piece, and had the feeling after a few hours my
experience was buggy: don’t know why but the UWP lib. lost its references to
Xamarin.Forms NuGet package, updating such back and forth made the build to
break (restarting fixed it however), and saw my-self closing and opening it once
and again. I feel Mac version is more stable in terms of Xamarin development,
but am not a heavy Windows user these days.&lt;/p&gt;

&lt;p&gt;Pst! Don’t want to say it louder, but you can use below comments already 🙌&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Sun, 07 Jan 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Thursday</title>
  <guid>https://marcoscobena.com/#/2018-1-4</guid>
  <description>&lt;p&gt;I’m working on a video-game. Actually have been working on it since Christmas
began. I think will keep posting details mostly during weekends —have an
agreement with my-self of not working on anything which could do in my daily
job.&lt;/p&gt;

&lt;p&gt;However, today I came across &lt;a href="https://www.youtube.com/watch?v=lql2yFXzKUs"&gt;this promising
video&lt;/a&gt; on creating Adventure Games
in Clojure (OK, you already know what sort of game it's), and a light turned on
in my head: I need something like scripting.&lt;/p&gt;

&lt;p&gt;Since am on an early stage and just have a quite small prototype, am in the
process of rewriting it with a brand new script-alike description: each
&lt;code&gt;GameFrame&lt;/code&gt; now has a &lt;code&gt;Script&lt;/code&gt; prop. which allows to do things like:&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Script = new Task(async () =&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;    {
        await Show("Suena la alarma: 7:00 am.");
        
        while (timesAlarmSnoozed &amp;lt; 3)
        {
            await InteractionWith(alarmClock);
            timesAlarmSnoozed++;
        }&lt;/p&gt;

&lt;p&gt;        await Show("Me levanté...");
    });
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;A few hours before I couldn’t handle this sort of logic, just more simpler ones.
Now, am thrilled with the incoming possibilities this’ offering 🤘&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Wed, 03 Jan 2018 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Thursday</title>
  <guid>https://marcoscobena.com/#/2017-12-21</guid>
  <description>&lt;p&gt;Maybe this’ totally newbie but I’ve used for the very first time git’s
fast-forward thing. For my future me: quite useful when you have a branch
outdated and there are no changes on it from the last merge back, so simply you
move it “fast forward”.&lt;/p&gt;

&lt;p&gt;Our app blends native stuff with WebViews, and have to detect when navigating to
key URLs in order to fire something native —read the VoIP stuff I was working
with Twilio. It turns out making a redirection in Angular makes the page update
its location (what you see in the browser’s bar) but doesn’t imply a 302 HTTP
code, so it’s not detected within the WebView. We’re still working on a fix for
this.&lt;/p&gt;

&lt;p&gt;I’ve learned how to integrate Disqus on my pure-JavaScript-powered website! The
bad news’ don’t know why but making tests in localhost made Disqus thought every
comment now’s made locally too :-S In the meantime have closed the discussion.
But there it’s at bottom!&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Wed, 20 Dec 2017 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Wednesday</title>
  <guid>https://marcoscobena.com/#/2017-12-20</guid>
  <description>&lt;p&gt;Since the nature of DevsDNA we use to work in a team made of people from our
company as well from others –customer included. We have dailies, and exchange
info through Skype, but always have had the feeling improvements made related to
code don’t arrive to others in order to follow the same path altogether.&lt;/p&gt;

&lt;p&gt;A few weeks ago had the idea of Dear Developer comments: small letters in the
middle of source code which explains to others how to handle things directly in
context. For instance, a few days ago we made a large merge of 3 RESX files into
a single one, and I particularly was afraid this wouldn’t get to others, so add
this chunk as a TXT along with the final RESX:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;PLEASE_README_BEFORE_ADDING_STRINGS.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt;Dear Developer,&lt;/p&gt;

&lt;p&gt;From December 13th we've merged EN (Strings.resx, default one), ES and PT dictionaries to just one 
with everything in Spanish on it, as it comes from Zeplin. Please don't add anything else on it 
different to Spanish.&lt;/p&gt;

&lt;p&gt;In a later phase final customer will provide back English and Portuguese translations.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Marcos&lt;/p&gt;

&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;It has a few characteristic things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;it’s honest: I explain the issue, the reason for the change made;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it’s sweetie: from me to my rest of workmates, and those can contact me back
if want more information&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Maybe this’ somewhat stupid in the era we live, but it’s the most simple way
have found out to tell others to take care of things as a team of people working
for the sake of quality. It resembled those README.txt from the 90s I read once
and again.&lt;/p&gt;

&lt;p&gt;PS: Anyone knows an UI-based RESX editor for Mac? I can do it directly in XML
but definitely an Excel-like editor is much more convenient. If it’s non
existent may be a good pet project to work on.&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Tue, 19 Dec 2017 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Tuesday</title>
  <guid>https://marcoscobena.com/#/2017-12-19</guid>
  <description>&lt;p&gt;I’ve had the chance to add a small anim. in the page am working out. Which’s the
best easing function to fit? &lt;a href="http://easings.net"&gt;http://easings.net&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the middle of the day &lt;a href="https://bugzilla.xamarin.com/show_bug.cgi?id=61094"&gt;the disappearing caret
bug&lt;/a&gt; reproduced, and
followed Lluis steps to gather the IDE logs: (within VS for Mac) Help &gt; Open
Log Directory. I didn’t remember such this easy way to access every log in a
single folder, for the next time will have a look there before.&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Mon, 18 Dec 2017 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Monday</title>
  <guid>https://marcoscobena.com/#/2017-12-18</guid>
  <description>&lt;p&gt;(Starting from today I’ll begin writting down What I Learned Today —WILT seems a
nice acronym.)&lt;/p&gt;

&lt;p&gt;It seems Twilio’s Xamarin components are somewhat abandoned: took 1.2.3 from
last days of Xamarin Components and crashes in Android, so back to 1.1; however,
can’t consume 1.1 in iOS because is pre-Unified API, so am using 1.2.3 in this
platform. But have done my first calls in both! 🎉&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Sun, 17 Dec 2017 23:00:00 GMT</pubDate>
</item>
<item>
  <title>App screen creation template</title>
  <guid>https://marcoscobena.com/#/app-screen-creation-template</guid>
  <description>&lt;p&gt;This’ about finding a procedure for my-self to develop apps screens, iterating
it and making it public for everyone. I’ve always liked the to do lists, and the
feeling behind checking something done.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://marcoscobena.com/items/images/IMG_0655.JPG" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://marcoscobena.com/items/documents/AppScreenCreationTemplate.pdf"&gt;Download&lt;/a&gt; latest version.&lt;/p&gt;</description>
  <author>marcoscm.digital@gmail.com (Marcos Cobeña Morián)</author>
  <category>Xamarin</category>
  <pubDate>Thu, 16 Feb 2017 23:00:00 GMT</pubDate>
</item></channel>
</rss>