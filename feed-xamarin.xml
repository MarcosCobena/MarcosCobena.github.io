<?xml version="1.0" encoding="utf-8"?><rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Marcos Cobeña Morián</title><description /><lastBuildDate>Mon, 20 Feb 2017 12:55:07</lastBuildDate><item><title>App screen creation template</title><author>marcoscm.digital@gmail.com</author><description type="html">&lt;p&gt;This’ about finding a procedure for my-self to develop apps screens, iterating
it and making it public for everyone. I’ve always liked the to do lists, and the
feeling behind checking something done.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://marcoscobena.com/items/images/IMG_0655.JPG" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://marcoscobena.com/items/documents/AppScreenCreationTemplate.pdf"&gt;Download&lt;/a&gt; latest version.&lt;/p&gt;
</description><link>http://marcoscobena.com/#/app-screen-creation-template</link><pubDate>Fri, 17 Feb 2017 00:00:00</pubDate></item><item><title>Last week: Dynamic cell's height</title><author>marcoscm.digital@gmail.com</author><description type="html">&lt;p&gt;I’m currently working on an iOS app which has an UICollectionView with different
cells, and one of those has inside an UIWebView. Such, renders HTML returned
from an API and, by design specs., the container cell must grow to accommodate
the final web page loaded (similar to what Medium's app does when you tap on an
article).&lt;/p&gt;
&lt;p&gt;My question was: how can I achieve such dynamic growth? By one side, is how we
gather the final HTML document’s height, where this simple JavaScript snippet
returns exactly that:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;var actualHeight = WebView.EvaluateJavascript(&amp;quot;document.body.scrollHeight&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(You’ll need to execute it just before the DOM is loaded, where
UIWebView.LoadFinished is pretty handy.)&lt;/p&gt;
&lt;p&gt;By the other one, how do I tell back the UICollectionView that specific cells
need more vertical space? Looking through Google I found out a few articles and
StackOverflow questions which touch this and, don’t know where, found what I
finally implemented: the atrezzo cell technique (the “atrezzo” thing is mine).&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src="https://c1.staticflickr.com/4/3328/3413473433_fe6c742ece.jpg" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.flickr.com/photos/bercastell/3413473433/in/photolist-6cCWJe-a6KDLu-oQeMLJ-pLRxrx-a6GPRV-a6GJ4B-a6KyE5-a6Kx2N-pM6bEi-4srKjd-qX4maB-7N69yK-pJZRR9-a6GLNT-a6GMrT-a6GDHn-a6KEiJ-x65cH-5nsuJ8-a6KF1w-6YYXJ9-a6Kzdj-5nsvJT-4uwnHr-5nwH83-pMasKU-5nx2wm-a6GFWk-5nssQg-5nstJV-pJZP7w-pMatRw-6YZ3Sd-2fB5hD-6YZ9cL-jZiRmk-6o5SdR-6oa49Q-6YZ6sh-6YYEBb-qYcshv-6YYBAJ-f4ixo9-nAV2ye-3HpRKD-nzaa1s-9bpzgX-994Qgp-9oYF6C-2BqLf6"&gt;Títeres&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;The idea is as follows: why don’t we create an atrezzo cell -one which never
gets actually added to the collection view- just for computing its size
depending on its content? That way, asynchronously we’ll get the final height
(through above JavaScript) and ask the collection view to reload just that item.
Something like this -in your UICollectionViewSource:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;[Export(&amp;quot;collectionView:layout:sizeForItemAtIndexPath:&amp;quot;)]
public virtual CGSize SizeForItemAtIndexPath(UICollectionView collectionView, 
                                             UICollectionViewLayout layout, 
                                             NSIndexPath indexPath)
{
    [...]

    if (_webViewHeight == 0)
    {
        if (_atrezzoCell == null)
        {
            _atrezzoCell = NSBundle.MainBundle.LoadNib(nameof(WebViewCell), 
                this, null)
                .GetItem&amp;lt;WebViewCell&amp;gt;(0);

            _atrezzoCell.HeightMeasured += (sender, e) =&amp;gt;
            {
                _webViewHeight = e.Height;

                ReloadItemAction(indexPath);
            };
        }

        var item = GetItemAt(indexPath);

        _atrezzoCell.Refresh(item);
        _atrezzoCell.SetNeedsLayout();
        _atrezzoCell.LayoutIfNeeded();

        size = _atrezzoCell.ContentView.SystemLayoutSizeFittingSize(
            UIView.UILayoutFittingCompressedSize);

        _previousItemHeight = size.Height;

        size.Width = collectionView.Frame.Width;
    }
    else
        size = new CGSize(collectionView.Frame.Width, 
            _previousItemHeight + _webViewHeight);

    [...]

    return size;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I implemented this back in December and last week had a similar task but without
involving UIWebView. Our workmate Oriol made a simple yet powerful approach
without needed those atrezzos so, finally, this time I backed on his solution. I
hope this servers as a poke to him to write how he sorted that out which, for
sure, will be useful for others as well.&lt;/p&gt;
</description><link>http://marcoscobena.com/#/last-week-dynamic-cells-height</link><pubDate>Wed, 01 Feb 2017 00:00:00</pubDate></item><item><title>Last week: Xamarin and HoloLens</title><author>marcoscm.digital@gmail.com</author><description type="html">&lt;p&gt;From monday to friday I spent last week introducing Xamarin, by one side, and
HoloLens, by the other one.&lt;/p&gt;
&lt;p&gt;First part of the week Oriol and I visited Clibb, a software factory located at
Lleida, whose team already work with Xamarin but wanted us to cover from Android
and iOS to DevOps, going through Forms too. I had a “zen moment”, named by
Oriol, when I was explaining why DevOps is important to give as much value as
possible to our customers, and how this impacts in our own happiness too.&lt;/p&gt;
&lt;p&gt;Second one, I gave an overview of HoloLens’ capabilities with UWP and Unity at
Birchman, Clibb’s parent company. Assistants where most of them Team Leads, and
we tried together to clarify which sort of things can be figured out with
HoloLens nowadays. We all both agree on the need of a larger display in the
glasses as the primary issue to workaround, but one of the attendees had a
clever idea: why don’t we simply put a frame which recalls recording cameras’
viewport? For me it was a sample of a bad thing made opportunity. Loved it.&lt;/p&gt;
&lt;p&gt;We at DevsDNA have a high commitment with education, if you or your company
think we could help there to make more beautiful, usable, better mobile apps,
just &lt;a href="mailto:marcos@devsdna.com"&gt;let us know&lt;/a&gt;.&lt;/p&gt;
</description><link>http://marcoscobena.com/#/last-week-xamarin-hololens</link><pubDate>Wed, 25 Jan 2017 00:00:00</pubDate></item><a10:id>http://marcoscobena.com</a10:id></channel></rss>